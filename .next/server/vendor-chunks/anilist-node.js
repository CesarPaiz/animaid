"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/anilist-node";
exports.ids = ["vendor-chunks/anilist-node"];
exports.modules = {

/***/ "(rsc)/./node_modules/anilist-node/lib/activity.js":
/*!***************************************************!*\
  !*** ./node_modules/anilist-node/lib/activity.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { TextActivityQuery, MessageActivityQuery, ListActivityQuery } = __webpack_require__(/*! ./consts */ \"(rsc)/./node_modules/anilist-node/lib/consts.js\");\n/**\r\n * Access activities on AniList\r\n * @since 1.7.0\r\n * @memberof AniList\r\n */ class Activity {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Get a specific AniList activity by its ID.\r\n\t * @param {Number} activityID The AniList activity ID\r\n\t * @returns { ListActivity | TextActivity | MessageActivity } Returns the activity information. Activity will either appear as:\r\n\t * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifiable by the type key.\r\n\t * @since 1.7.0\r\n\t */ get(activityID) {\n        const queryVars = this.util.generateQueryHeaders(\"Activity\", activityID);\n        return this.util.send(queryVars[1] + `... on ListActivity {\r\n                ${ListActivityQuery}\r\n            }\r\n            ... on TextActivity {\r\n                ${TextActivityQuery}\r\n            }\r\n            ... on MessageActivity {\r\n                ${MessageActivityQuery}\r\n            }}}`, queryVars[0]).then((data)=>{\n            return data.Activity;\n        });\n    }\n    /**\r\n\t * Fetch activities from a user.\r\n\t * @param {Number} user - Required. Needs to be the user's AniList ID.\r\n\t * @param {Number} page - The page number to display\r\n\t * @param {Number} perPage - How many entries to display on one page. (Max is 25 per AniList limit)\r\n\t * @returns { Object[] } Returns a list of user activities based on the page & perPage values Contains any number of\r\n\t * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifiable by the type key.\r\n\t *\r\n\t * @since 1.7.0\r\n\t */ getUserActivity(user, page = 1, perPage = 25) {\n        if (typeof user !== \"number\" || typeof page !== \"number\" || typeof perPage !== \"number\") {\n            throw new Error(\"Term does not match the required type!\");\n        }\n        return this.util.send(`query ($page: Int, $perPage: Int, $user: Int) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            activities(userId: $user, sort:ID_DESC) {\r\n                ... on ListActivity { ${ListActivityQuery} }\r\n                ... on TextActivity { ${TextActivityQuery} }\r\n                ... on MessageActivity { ${MessageActivityQuery} }\r\n            } } }`, {\n            user: user,\n            page: page,\n            perPage: perPage\n        }).then((data)=>{\n            return data;\n        });\n    }\n    /**\r\n\t * [Require Login] Post a new text activity or update the activity with its ID\r\n\t * @param {String} text - The content of the activity.\r\n\t * @param {Number?} id - The AniList activity ID. Null to create, number for update\r\n\t *\r\n\t * @returns {TextActivity}\r\n\t * @since 1.11.0\r\n\t */ async postText(text, id) {\n        if (typeof text !== \"string\") {\n            throw new Error(\"Text is not a string type.\");\n        }\n        if (id && typeof id !== \"number\") {\n            throw new Error(\"Provided ID is not a number type.\");\n        }\n        const data = await this.util.send(`mutation ($id: Int, $text: String) {\r\n\t\t\t\tSaveTextActivity(id: $id, text: $text) {\r\n\t\t\t\t${TextActivityQuery}\r\n\t\t\t} }`, {\n            id: id,\n            text: text\n        });\n        return data.SaveTextActivity;\n    }\n    /**\r\n\t * [Require Login] Post a new message activity or update the activity with its ID\r\n\t * @param {String} text - The activity message text\r\n\t * @param {Number} recipientId - The target user to send the message to\r\n\t * @param {Boolean} isPrivate - Set to true if it is a private message\r\n\t * @param {Number?} id - AniList Activity ID. Null to create, number to update.\r\n\t *\r\n\t * @returns {MessageActivity}\r\n\t * @since 1.11.0\r\n\t */ async postMessage(text, recipientId, isPrivate = false, id) {\n        if (typeof text !== \"string\") {\n            throw new Error(\"Text is not a string type.\");\n        }\n        if (typeof recipientId !== \"number\") {\n            throw new Error(\"Recipient ID is not a number type.\");\n        }\n        if (id && typeof id !== \"number\") {\n            throw new Error(\"Provided ID is not a number type.\");\n        }\n        const data = await this.util.send(`mutation ($id: Int, $text: String, $recipientId: Int, $private: Boolean) {\r\n\t\t\tSaveMessageActivity(message: $text, id: $id, recipientId: $recipientId, private: $private) {\r\n\t\t\t  ${MessageActivityQuery}\r\n\t\t\t} }`, {\n            id: id,\n            text: text,\n            recipientId: recipientId,\n            private: isPrivate\n        });\n        return data.SaveMessageActivity;\n    }\n    /**\r\n\t * [Require Login] Delete the current authorized user's activity post\r\n\t * @param {Number} id - The AniList activity ID to delete\r\n\t *\r\n\t * @returns {Boolean} Returns true if successful\r\n\t * @since 1.11.0\r\n\t */ async delete(id) {\n        if (typeof id !== \"number\") {\n            throw new Error(\"ID is not a number type.\");\n        }\n        const data = await this.util.send(`mutation ($id: Int) { DeleteActivity(id: $id) { deleted } }`, {\n            id: id\n        });\n        return data.DeleteActivity.deleted;\n    }\n}\nmodule.exports = Activity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/activity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/consts.js":
/*!*************************************************!*\
  !*** ./node_modules/anilist-node/lib/consts.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    // Queries for AniList.User\n    UserProfileQuery: `id name about avatar { large medium } bannerImage isFollowing isFollower isBlocked \r\n        bans \r\n        options { \r\n            titleLanguage displayAdultContent airingNotifications profileColor \r\n            activityMergeTime staffNameLanguage notificationOptions { type enabled } \r\n        }\r\n        mediaListOptions { scoreFormat rowOrder \r\n            animeList { sectionOrder splitCompletedSectionByFormat customLists advancedScoring advancedScoringEnabled }\r\n            mangaList { sectionOrder splitCompletedSectionByFormat customLists advancedScoring advancedScoringEnabled } } \r\n        favourites {\r\n            anime { nodes { id title { romaji english native userPreferred } type } }\r\n            manga { nodes { id title { romaji english native userPreferred } type } }\r\n            characters { nodes { id name { english: full } } }\r\n            staff { nodes { id name { english: full } } }\r\n            studios { nodes { id name } } }\r\n        unreadNotificationCount siteUrl donatorTier donatorBadge moderatorRoles updatedAt`,\n    UserStatsQuery: `statistics { anime {\r\n            meanScore standardDeviation count minutesWatched episodesWatched\r\n            statuses { count meanScore minutesWatched status }\r\n            formats { count meanScore minutesWatched format }\r\n            lengths { count meanScore minutesWatched length }\r\n            releaseYears { count meanScore minutesWatched releaseYear }\r\n            startYears { count meanScore minutesWatched startYear }\r\n            genres { count meanScore minutesWatched genre }\r\n            tags { count meanScore minutesWatched tag { id name } }\r\n            countries { count meanScore minutesWatched country }\r\n            voiceActors { count meanScore minutesWatched voiceActor { id name { english: full } } }\r\n            staff { count meanScore minutesWatched staff { id name { english: full } } }\r\n            studios { count meanScore minutesWatched studio { id name } } }\r\n        manga {\r\n            meanScore standardDeviation count chaptersRead volumesRead\r\n            statuses { count meanScore chaptersRead status }\r\n            formats { count meanScore chaptersRead format }\r\n            lengths { count meanScore chaptersRead length }\r\n            releaseYears { count meanScore chaptersRead releaseYear }\r\n            startYears { count meanScore chaptersRead startYear }\r\n            genres { count meanScore chaptersRead genre }\r\n            tags { count meanScore chaptersRead tag { id name } }\r\n            countries { count meanScore chaptersRead country }\r\n            staff { count meanScore chaptersRead staff { id name { english: full } } } } }`,\n    UserUpdateQuery: `mutation (\r\n        $about: String, $titleLanguage: UserTitleLanguage, $displayAdultContent: Boolean,\r\n        $airingNotifications: Boolean, $scoreFormat: ScoreFormat, $rowOrder: String,\r\n        $profileColor: String, $donatorBadge: String, $notificationOptions: [NotificationOptionInput],\r\n        $timezone: String, $activityMergeTime: Int, $animeListOptions: MediaListOptionsInput,\r\n        $mangaListOptions: MediaListOptionsInput, $staffNameLanguage: UserStaffNameLanguage\r\n        ) {\r\n        UpdateUser(\r\n            about: $about, titleLanguage: $titleLanguage, displayAdultContent: $displayAdultContent,\r\n            airingNotifications: $airingNotifications, scoreFormat: $scoreFormat, rowOrder: $rowOrder,\r\n            profileColor: $profileColor, donatorBadge: $donatorBadge, notificationOptions: $notificationOptions,\r\n            timezone: $timezone, activityMergeTime: $activityMergeTime, animeListOptions: $animeListOptions,\r\n            mangaListOptions: $mangaListOptions, staffNameLanguage: $staffNameLanguage\r\n        ) {\r\n            about \r\n            options { \r\n                titleLanguage displayAdultContent airingNotifications profileColor \r\n                timezone activityMergeTime staffNameLanguage notificationOptions { type enabled } \r\n            }\r\n            mediaListOptions { scoreFormat rowOrder \r\n                animeList { sectionOrder splitCompletedSectionByFormat customLists advancedScoring advancedScoringEnabled }\r\n                mangaList { sectionOrder splitCompletedSectionByFormat customLists advancedScoring advancedScoringEnabled } }\r\n            donatorBadge\r\n        }\r\n    }`,\n    TextActivityQuery: `id user { id name } type text createdAt replies { id text likeCount }\r\n        isLocked isSubscribed isLiked likes { id name }`,\n    MessageActivityQuery: `id recipient { id name } type message createdAt replies { id text likeCount }\r\n        user:messenger { id name } isPrivate isLocked isSubscribed isLiked likes { id name }`,\n    ListActivityQuery: ` id user { id name } status type progress\r\n        media { id title { romaji english native userPreferred } type }\r\n        createdAt isLocked isSubscribed isLiked replies { id text likeCount } likes { id name }`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi9jb25zdHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEIsMkJBQTJCO0lBQzNCQyxrQkFBa0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O3lGQWVxRSxDQUFDO0lBQ3pGQyxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEZBdUJ3RSxDQUFDO0lBQzFGQyxpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBd0JkLENBQUM7SUFDTEMsbUJBQW1CLENBQUM7dURBQ2tDLENBQUM7SUFDdkRDLHNCQUFzQixDQUFDOzRGQUNvRSxDQUFDO0lBQzVGQyxtQkFBbUIsQ0FBQzs7K0ZBRTBFLENBQUM7QUFDaEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYWlkLy4vbm9kZV9tb2R1bGVzL2FuaWxpc3Qtbm9kZS9saWIvY29uc3RzLmpzPzNkZWUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Ly8gUXVlcmllcyBmb3IgQW5pTGlzdC5Vc2VyXHJcblx0VXNlclByb2ZpbGVRdWVyeTogYGlkIG5hbWUgYWJvdXQgYXZhdGFyIHsgbGFyZ2UgbWVkaXVtIH0gYmFubmVySW1hZ2UgaXNGb2xsb3dpbmcgaXNGb2xsb3dlciBpc0Jsb2NrZWQgXHJcbiAgICAgICAgYmFucyBcclxuICAgICAgICBvcHRpb25zIHsgXHJcbiAgICAgICAgICAgIHRpdGxlTGFuZ3VhZ2UgZGlzcGxheUFkdWx0Q29udGVudCBhaXJpbmdOb3RpZmljYXRpb25zIHByb2ZpbGVDb2xvciBcclxuICAgICAgICAgICAgYWN0aXZpdHlNZXJnZVRpbWUgc3RhZmZOYW1lTGFuZ3VhZ2Ugbm90aWZpY2F0aW9uT3B0aW9ucyB7IHR5cGUgZW5hYmxlZCB9IFxyXG4gICAgICAgIH1cclxuICAgICAgICBtZWRpYUxpc3RPcHRpb25zIHsgc2NvcmVGb3JtYXQgcm93T3JkZXIgXHJcbiAgICAgICAgICAgIGFuaW1lTGlzdCB7IHNlY3Rpb25PcmRlciBzcGxpdENvbXBsZXRlZFNlY3Rpb25CeUZvcm1hdCBjdXN0b21MaXN0cyBhZHZhbmNlZFNjb3JpbmcgYWR2YW5jZWRTY29yaW5nRW5hYmxlZCB9XHJcbiAgICAgICAgICAgIG1hbmdhTGlzdCB7IHNlY3Rpb25PcmRlciBzcGxpdENvbXBsZXRlZFNlY3Rpb25CeUZvcm1hdCBjdXN0b21MaXN0cyBhZHZhbmNlZFNjb3JpbmcgYWR2YW5jZWRTY29yaW5nRW5hYmxlZCB9IH0gXHJcbiAgICAgICAgZmF2b3VyaXRlcyB7XHJcbiAgICAgICAgICAgIGFuaW1lIHsgbm9kZXMgeyBpZCB0aXRsZSB7IHJvbWFqaSBlbmdsaXNoIG5hdGl2ZSB1c2VyUHJlZmVycmVkIH0gdHlwZSB9IH1cclxuICAgICAgICAgICAgbWFuZ2EgeyBub2RlcyB7IGlkIHRpdGxlIHsgcm9tYWppIGVuZ2xpc2ggbmF0aXZlIHVzZXJQcmVmZXJyZWQgfSB0eXBlIH0gfVxyXG4gICAgICAgICAgICBjaGFyYWN0ZXJzIHsgbm9kZXMgeyBpZCBuYW1lIHsgZW5nbGlzaDogZnVsbCB9IH0gfVxyXG4gICAgICAgICAgICBzdGFmZiB7IG5vZGVzIHsgaWQgbmFtZSB7IGVuZ2xpc2g6IGZ1bGwgfSB9IH1cclxuICAgICAgICAgICAgc3R1ZGlvcyB7IG5vZGVzIHsgaWQgbmFtZSB9IH0gfVxyXG4gICAgICAgIHVucmVhZE5vdGlmaWNhdGlvbkNvdW50IHNpdGVVcmwgZG9uYXRvclRpZXIgZG9uYXRvckJhZGdlIG1vZGVyYXRvclJvbGVzIHVwZGF0ZWRBdGAsXHJcblx0VXNlclN0YXRzUXVlcnk6IGBzdGF0aXN0aWNzIHsgYW5pbWUge1xyXG4gICAgICAgICAgICBtZWFuU2NvcmUgc3RhbmRhcmREZXZpYXRpb24gY291bnQgbWludXRlc1dhdGNoZWQgZXBpc29kZXNXYXRjaGVkXHJcbiAgICAgICAgICAgIHN0YXR1c2VzIHsgY291bnQgbWVhblNjb3JlIG1pbnV0ZXNXYXRjaGVkIHN0YXR1cyB9XHJcbiAgICAgICAgICAgIGZvcm1hdHMgeyBjb3VudCBtZWFuU2NvcmUgbWludXRlc1dhdGNoZWQgZm9ybWF0IH1cclxuICAgICAgICAgICAgbGVuZ3RocyB7IGNvdW50IG1lYW5TY29yZSBtaW51dGVzV2F0Y2hlZCBsZW5ndGggfVxyXG4gICAgICAgICAgICByZWxlYXNlWWVhcnMgeyBjb3VudCBtZWFuU2NvcmUgbWludXRlc1dhdGNoZWQgcmVsZWFzZVllYXIgfVxyXG4gICAgICAgICAgICBzdGFydFllYXJzIHsgY291bnQgbWVhblNjb3JlIG1pbnV0ZXNXYXRjaGVkIHN0YXJ0WWVhciB9XHJcbiAgICAgICAgICAgIGdlbnJlcyB7IGNvdW50IG1lYW5TY29yZSBtaW51dGVzV2F0Y2hlZCBnZW5yZSB9XHJcbiAgICAgICAgICAgIHRhZ3MgeyBjb3VudCBtZWFuU2NvcmUgbWludXRlc1dhdGNoZWQgdGFnIHsgaWQgbmFtZSB9IH1cclxuICAgICAgICAgICAgY291bnRyaWVzIHsgY291bnQgbWVhblNjb3JlIG1pbnV0ZXNXYXRjaGVkIGNvdW50cnkgfVxyXG4gICAgICAgICAgICB2b2ljZUFjdG9ycyB7IGNvdW50IG1lYW5TY29yZSBtaW51dGVzV2F0Y2hlZCB2b2ljZUFjdG9yIHsgaWQgbmFtZSB7IGVuZ2xpc2g6IGZ1bGwgfSB9IH1cclxuICAgICAgICAgICAgc3RhZmYgeyBjb3VudCBtZWFuU2NvcmUgbWludXRlc1dhdGNoZWQgc3RhZmYgeyBpZCBuYW1lIHsgZW5nbGlzaDogZnVsbCB9IH0gfVxyXG4gICAgICAgICAgICBzdHVkaW9zIHsgY291bnQgbWVhblNjb3JlIG1pbnV0ZXNXYXRjaGVkIHN0dWRpbyB7IGlkIG5hbWUgfSB9IH1cclxuICAgICAgICBtYW5nYSB7XHJcbiAgICAgICAgICAgIG1lYW5TY29yZSBzdGFuZGFyZERldmlhdGlvbiBjb3VudCBjaGFwdGVyc1JlYWQgdm9sdW1lc1JlYWRcclxuICAgICAgICAgICAgc3RhdHVzZXMgeyBjb3VudCBtZWFuU2NvcmUgY2hhcHRlcnNSZWFkIHN0YXR1cyB9XHJcbiAgICAgICAgICAgIGZvcm1hdHMgeyBjb3VudCBtZWFuU2NvcmUgY2hhcHRlcnNSZWFkIGZvcm1hdCB9XHJcbiAgICAgICAgICAgIGxlbmd0aHMgeyBjb3VudCBtZWFuU2NvcmUgY2hhcHRlcnNSZWFkIGxlbmd0aCB9XHJcbiAgICAgICAgICAgIHJlbGVhc2VZZWFycyB7IGNvdW50IG1lYW5TY29yZSBjaGFwdGVyc1JlYWQgcmVsZWFzZVllYXIgfVxyXG4gICAgICAgICAgICBzdGFydFllYXJzIHsgY291bnQgbWVhblNjb3JlIGNoYXB0ZXJzUmVhZCBzdGFydFllYXIgfVxyXG4gICAgICAgICAgICBnZW5yZXMgeyBjb3VudCBtZWFuU2NvcmUgY2hhcHRlcnNSZWFkIGdlbnJlIH1cclxuICAgICAgICAgICAgdGFncyB7IGNvdW50IG1lYW5TY29yZSBjaGFwdGVyc1JlYWQgdGFnIHsgaWQgbmFtZSB9IH1cclxuICAgICAgICAgICAgY291bnRyaWVzIHsgY291bnQgbWVhblNjb3JlIGNoYXB0ZXJzUmVhZCBjb3VudHJ5IH1cclxuICAgICAgICAgICAgc3RhZmYgeyBjb3VudCBtZWFuU2NvcmUgY2hhcHRlcnNSZWFkIHN0YWZmIHsgaWQgbmFtZSB7IGVuZ2xpc2g6IGZ1bGwgfSB9IH0gfSB9YCxcclxuXHRVc2VyVXBkYXRlUXVlcnk6IGBtdXRhdGlvbiAoXHJcbiAgICAgICAgJGFib3V0OiBTdHJpbmcsICR0aXRsZUxhbmd1YWdlOiBVc2VyVGl0bGVMYW5ndWFnZSwgJGRpc3BsYXlBZHVsdENvbnRlbnQ6IEJvb2xlYW4sXHJcbiAgICAgICAgJGFpcmluZ05vdGlmaWNhdGlvbnM6IEJvb2xlYW4sICRzY29yZUZvcm1hdDogU2NvcmVGb3JtYXQsICRyb3dPcmRlcjogU3RyaW5nLFxyXG4gICAgICAgICRwcm9maWxlQ29sb3I6IFN0cmluZywgJGRvbmF0b3JCYWRnZTogU3RyaW5nLCAkbm90aWZpY2F0aW9uT3B0aW9uczogW05vdGlmaWNhdGlvbk9wdGlvbklucHV0XSxcclxuICAgICAgICAkdGltZXpvbmU6IFN0cmluZywgJGFjdGl2aXR5TWVyZ2VUaW1lOiBJbnQsICRhbmltZUxpc3RPcHRpb25zOiBNZWRpYUxpc3RPcHRpb25zSW5wdXQsXHJcbiAgICAgICAgJG1hbmdhTGlzdE9wdGlvbnM6IE1lZGlhTGlzdE9wdGlvbnNJbnB1dCwgJHN0YWZmTmFtZUxhbmd1YWdlOiBVc2VyU3RhZmZOYW1lTGFuZ3VhZ2VcclxuICAgICAgICApIHtcclxuICAgICAgICBVcGRhdGVVc2VyKFxyXG4gICAgICAgICAgICBhYm91dDogJGFib3V0LCB0aXRsZUxhbmd1YWdlOiAkdGl0bGVMYW5ndWFnZSwgZGlzcGxheUFkdWx0Q29udGVudDogJGRpc3BsYXlBZHVsdENvbnRlbnQsXHJcbiAgICAgICAgICAgIGFpcmluZ05vdGlmaWNhdGlvbnM6ICRhaXJpbmdOb3RpZmljYXRpb25zLCBzY29yZUZvcm1hdDogJHNjb3JlRm9ybWF0LCByb3dPcmRlcjogJHJvd09yZGVyLFxyXG4gICAgICAgICAgICBwcm9maWxlQ29sb3I6ICRwcm9maWxlQ29sb3IsIGRvbmF0b3JCYWRnZTogJGRvbmF0b3JCYWRnZSwgbm90aWZpY2F0aW9uT3B0aW9uczogJG5vdGlmaWNhdGlvbk9wdGlvbnMsXHJcbiAgICAgICAgICAgIHRpbWV6b25lOiAkdGltZXpvbmUsIGFjdGl2aXR5TWVyZ2VUaW1lOiAkYWN0aXZpdHlNZXJnZVRpbWUsIGFuaW1lTGlzdE9wdGlvbnM6ICRhbmltZUxpc3RPcHRpb25zLFxyXG4gICAgICAgICAgICBtYW5nYUxpc3RPcHRpb25zOiAkbWFuZ2FMaXN0T3B0aW9ucywgc3RhZmZOYW1lTGFuZ3VhZ2U6ICRzdGFmZk5hbWVMYW5ndWFnZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBhYm91dCBcclxuICAgICAgICAgICAgb3B0aW9ucyB7IFxyXG4gICAgICAgICAgICAgICAgdGl0bGVMYW5ndWFnZSBkaXNwbGF5QWR1bHRDb250ZW50IGFpcmluZ05vdGlmaWNhdGlvbnMgcHJvZmlsZUNvbG9yIFxyXG4gICAgICAgICAgICAgICAgdGltZXpvbmUgYWN0aXZpdHlNZXJnZVRpbWUgc3RhZmZOYW1lTGFuZ3VhZ2Ugbm90aWZpY2F0aW9uT3B0aW9ucyB7IHR5cGUgZW5hYmxlZCB9IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1lZGlhTGlzdE9wdGlvbnMgeyBzY29yZUZvcm1hdCByb3dPcmRlciBcclxuICAgICAgICAgICAgICAgIGFuaW1lTGlzdCB7IHNlY3Rpb25PcmRlciBzcGxpdENvbXBsZXRlZFNlY3Rpb25CeUZvcm1hdCBjdXN0b21MaXN0cyBhZHZhbmNlZFNjb3JpbmcgYWR2YW5jZWRTY29yaW5nRW5hYmxlZCB9XHJcbiAgICAgICAgICAgICAgICBtYW5nYUxpc3QgeyBzZWN0aW9uT3JkZXIgc3BsaXRDb21wbGV0ZWRTZWN0aW9uQnlGb3JtYXQgY3VzdG9tTGlzdHMgYWR2YW5jZWRTY29yaW5nIGFkdmFuY2VkU2NvcmluZ0VuYWJsZWQgfSB9XHJcbiAgICAgICAgICAgIGRvbmF0b3JCYWRnZVxyXG4gICAgICAgIH1cclxuICAgIH1gLFxyXG5cdFRleHRBY3Rpdml0eVF1ZXJ5OiBgaWQgdXNlciB7IGlkIG5hbWUgfSB0eXBlIHRleHQgY3JlYXRlZEF0IHJlcGxpZXMgeyBpZCB0ZXh0IGxpa2VDb3VudCB9XHJcbiAgICAgICAgaXNMb2NrZWQgaXNTdWJzY3JpYmVkIGlzTGlrZWQgbGlrZXMgeyBpZCBuYW1lIH1gLFxyXG5cdE1lc3NhZ2VBY3Rpdml0eVF1ZXJ5OiBgaWQgcmVjaXBpZW50IHsgaWQgbmFtZSB9IHR5cGUgbWVzc2FnZSBjcmVhdGVkQXQgcmVwbGllcyB7IGlkIHRleHQgbGlrZUNvdW50IH1cclxuICAgICAgICB1c2VyOm1lc3NlbmdlciB7IGlkIG5hbWUgfSBpc1ByaXZhdGUgaXNMb2NrZWQgaXNTdWJzY3JpYmVkIGlzTGlrZWQgbGlrZXMgeyBpZCBuYW1lIH1gLFxyXG5cdExpc3RBY3Rpdml0eVF1ZXJ5OiBgIGlkIHVzZXIgeyBpZCBuYW1lIH0gc3RhdHVzIHR5cGUgcHJvZ3Jlc3NcclxuICAgICAgICBtZWRpYSB7IGlkIHRpdGxlIHsgcm9tYWppIGVuZ2xpc2ggbmF0aXZlIHVzZXJQcmVmZXJyZWQgfSB0eXBlIH1cclxuICAgICAgICBjcmVhdGVkQXQgaXNMb2NrZWQgaXNTdWJzY3JpYmVkIGlzTGlrZWQgcmVwbGllcyB7IGlkIHRleHQgbGlrZUNvdW50IH0gbGlrZXMgeyBpZCBuYW1lIH1gXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiVXNlclByb2ZpbGVRdWVyeSIsIlVzZXJTdGF0c1F1ZXJ5IiwiVXNlclVwZGF0ZVF1ZXJ5IiwiVGV4dEFjdGl2aXR5UXVlcnkiLCJNZXNzYWdlQWN0aXZpdHlRdWVyeSIsIkxpc3RBY3Rpdml0eVF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/fetcher.js":
/*!**************************************************!*\
  !*** ./node_modules/anilist-node/lib/fetcher.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fetch = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.js\");\nconst { AbortController } = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\n/**\r\n * Converts date object into null if year, month, and day are missing\r\n * @private\r\n * @param { Object } obj\r\n * @returns { Object | null }\r\n */ function convertPossibleDateNull(obj) {\n    if (obj.year === null && obj.month === null && obj.day === null) {\n        return null;\n    }\n    return obj;\n}\n/**\r\n * Moves data up levels in the object for better use.\r\n * @private\r\n * @param { Object } obj - Required. The object to edit.\r\n * @returns { Object } Returns the edited object.\r\n */ function edgeRemove(obj) {\n    let list = [];\n    for(let x = 0; x < obj.length; x++){\n        if (obj[x].name) {\n            obj[x].name = obj[x].name.english || obj[x].name.full;\n        }\n        if (obj[x].node) {\n            list.push(obj[x].node);\n        } else if (obj[x].id && obj[x].length === 1) {\n            list.push(obj[x].id);\n        } else if (obj[x].url) {\n            list.push(obj[x].url);\n        } else {\n            list.push(obj[x]);\n        }\n    }\n    if (list.length < 1) {\n        list = null;\n    }\n    return list;\n}\n/**\r\n * Converts a fuzzyDate into a Javascript Date\r\n * @private\r\n * @param { fuzzyDate } fuzzyDate - Date provided by AniList's API.\r\n * @returns { Date } Returns a date object of the data provided.\r\n */ function convertFuzzyDate(fuzzyDate) {\n    if (Object.values(fuzzyDate).some((d)=>d === null)) return null;\n    return new Date(fuzzyDate.year, fuzzyDate.month - 1, fuzzyDate.day);\n}\n/**\r\n * Formats the media data to read better.\r\n * @private\r\n * @param { Object } media\r\n */ function formatMedia(media) {\n    media.reviews = media.reviews.nodes.length === 0 ? null : media.reviews.nodes;\n    media.externalLinks = edgeRemove(media.externalLinks);\n    media.characters = edgeRemove(media.characters.nodes);\n    media.staff = edgeRemove(media.staff.nodes);\n    if (media.airingSchedule) {\n        media.airingSchedule = media.airingSchedule.nodes;\n    }\n    if (media.studios) {\n        media.studios = media.studios.nodes;\n    }\n    media.recommendations = media.recommendations.nodes;\n    media.relations = media.relations.nodes;\n    media.trends = media.trends.nodes;\n    if (media.synonyms.length < 1) {\n        media.synonyms = null;\n    }\n    if (media.trailer) {\n        switch(media.trailer.site){\n            case \"youtube\":\n                media.trailer = `https://www.youtube.com/watch?v=${media.trailer.id}`;\n                break;\n            case \"dailymotion\":\n                media.trailer = `https://www.dailymotion.com/video/${media.trailer.id}`;\n                break;\n            case undefined:\n                media.trailer = null;\n                break;\n            default:\n                break;\n        }\n    }\n    return media;\n}\nmodule.exports = {\n    /**\r\n\t * Send a call to the AniList API with a query and variables.\r\n\t * @param { String } query\r\n\t * @param { Object } variables\r\n\t * @returns { Object } Returns a customized object containing all of the data fetched.\r\n\t */ send: async function(query, variables) {\n        if (!query) {\n            throw new Error(\"Query is not given!\");\n        }\n        if (query.startsWith(\"mutation\") && this.key === null) {\n            throw new Error(\"Function requires authenciation but no authorization found.\");\n        }\n        const controller = new AbortController();\n        const requestTimeout = setTimeout(()=>{\n            controller.abort();\n        }, this.options.timeout);\n        const options = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            signal: controller.signal\n        };\n        if (this.key) {\n            options.headers.Authorization = `Bearer ${this.key}`;\n        }\n        if (variables) {\n            options.body = JSON.stringify({\n                query: query,\n                variables: variables\n            });\n        } else {\n            options.body = JSON.stringify({\n                query: query\n            });\n        }\n        const response = await fetch(\"https://graphql.anilist.co\", options).catch((error)=>{\n            if (error.name === \"AbortError\") {\n                throw new Error(`ERROR: Request timed out after ${this.options.timeout}ms, is AniList up?`);\n            }\n        }).finally(()=>{\n            clearTimeout(requestTimeout);\n        });\n        if (response.status !== 200) {\n            if (response.statusText) {\n                throw new Error(`ERROR: AniList API returned with a ${response.status} error code. Message: ${response.statusText}`);\n            }\n            throw new Error(`ERROR: AniList API returned with a ${response.status} error code.`);\n        }\n        const json = await response.json();\n        if (Object.keys(json).length < 0) {\n            throw new Error(\"ERROR: AniList API is down. Please refer to official channels for more information.\");\n        }\n        if (json.errors) {\n            return json.errors;\n        }\n        if (json.data.Media) {\n            return formatMedia(json.data.Media);\n        }\n        if (json.data.Character) {\n            json.data.Character.media = json.data.Character.media.nodes;\n            json.data.Character.dateOfBirth = convertPossibleDateNull(json.data.Character.dateOfBirth);\n            return json.data.Character;\n        }\n        if (json.data.Staff) {\n            if (json.data.Staff.description.length < 1) {\n                json.data.Staff.description = null;\n            }\n            json.data.Staff.dateOfBirth = convertPossibleDateNull(json.data.Staff.dateOfBirth);\n            json.data.Staff.dateOfDeath = convertPossibleDateNull(json.data.Staff.dateOfDeath);\n            json.data.Staff.staffMedia = json.data.Staff.staffMedia.nodes;\n            json.data.Staff.characters = json.data.Staff.characters.nodes;\n            json.data.Staff.characterMedia = json.data.Staff.characterMedia.nodes;\n            return json.data.Staff;\n        }\n        if (json.data.Page) {\n            if (json.data.Page.activities) {\n                // For list of recent activities with getRecentActivity.\n                return json.data.Page.activities;\n            }\n            if (json.data.Recommendation) {\n                // For recommendation lists.\n                json.data.Recommendation.recommendations = json.data.Page.recommendations;\n                return json.data.Recommendation;\n            }\n            return json.data.Page; // For general searching\n        }\n        if (json.data.Studio) {\n            json.data.Studio.media = edgeRemove(json.data.Studio.media.nodes);\n            return json.data.Studio;\n        }\n        if (json.data.User || json.data.Viewer) {\n            let userObj = json.data.User || json.data.Viewer;\n            if (userObj.statistics) {\n                //Move all names up a level.\n                userObj.statistics.anime.staff.forEach((e)=>{\n                    e.staff.name = e.staff.name.english;\n                });\n                userObj.statistics.anime.voiceActors.forEach((e)=>{\n                    e.voiceActor.name = e.voiceActor.name.english;\n                });\n                userObj.statistics.manga.staff.forEach((e)=>{\n                    e.staff.name = e.staff.name.english;\n                });\n            }\n            if (userObj.statistics && !userObj.avatar) {\n                return userObj.statistics;\n            }\n            //Move all node objects up one level.\n            userObj.favourites.anime = userObj.favourites.anime.nodes;\n            userObj.favourites.manga = userObj.favourites.manga.nodes;\n            userObj.favourites.characters = edgeRemove(userObj.favourites.characters.nodes);\n            userObj.favourites.staff = edgeRemove(userObj.favourites.staff.nodes);\n            userObj.favourites.studios = userObj.favourites.studios.nodes;\n            return userObj;\n        }\n        if (json.data.MediaListCollection) {\n            json.data.MediaListCollection.lists.forEach((list)=>{\n                list.entries.map((entry)=>{\n                    //Media does not need to be formatted in a list query.\n                    entry.dates = {\n                        startedAt: convertFuzzyDate(entry.startedAt),\n                        completedAt: convertFuzzyDate(entry.completedAt),\n                        updatedAt: new Date(entry.updatedAt * 1000),\n                        createdAt: entry.createdAt === 0 ? null : new Date(entry.createdAt * 1000)\n                    };\n                    [\n                        \"startedAt\",\n                        \"completedAt\",\n                        \"updatedAt\",\n                        \"createdAt\"\n                    ].forEach((e)=>delete entry[e]);\n                });\n            });\n            return json.data.MediaListCollection.lists;\n        }\n        if (json.data.SiteStatistics) {\n            for(const key in json.data.SiteStatistics){\n                json.data.SiteStatistics[key] = json.data.SiteStatistics[key].nodes;\n                for(const entry in json.data.SiteStatistics[key]){\n                    // Date is given in epoch time. x1000 with UTC seconds for date\n                    json.data.SiteStatistics[key][entry].date = new Date(json.data.SiteStatistics[key][entry].date * 1000);\n                }\n            }\n        }\n        return json.data; //If nothing matches, return collected data\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/fetcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/anilist-node/lib/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst activity = __webpack_require__(/*! ./activity */ \"(rsc)/./node_modules/anilist-node/lib/activity.js\"), lists = __webpack_require__(/*! ./lists */ \"(rsc)/./node_modules/anilist-node/lib/lists.js\"), media = __webpack_require__(/*! ./media */ \"(rsc)/./node_modules/anilist-node/lib/media.js\"), people = __webpack_require__(/*! ./people */ \"(rsc)/./node_modules/anilist-node/lib/people.js\"), recommendation = __webpack_require__(/*! ./recommendation */ \"(rsc)/./node_modules/anilist-node/lib/recommendation.js\"), searchEntry = __webpack_require__(/*! ./search */ \"(rsc)/./node_modules/anilist-node/lib/search.js\"), Thread = __webpack_require__(/*! ./thread */ \"(rsc)/./node_modules/anilist-node/lib/thread.js\"), User = __webpack_require__(/*! ./user */ \"(rsc)/./node_modules/anilist-node/lib/user.js\"), util = __webpack_require__(/*! ./utilities */ \"(rsc)/./node_modules/anilist-node/lib/utilities.js\");\n/**\r\n * The main class for AniList-Node\r\n * @since 1.0.0\r\n */ class AniList {\n    /**\r\n\t * @constructor\r\n\t * @param {String} [accessKey] - The AniList API token. If no key is provided,\r\n\t *      the user will not be able to access private information such as\r\n\t *      the authorized user's profile (if set to private).\r\n\t * @param {InitOptions} [options] - Optional options to use when getting info from AniList\r\n\t */ constructor(accessKey, options = {}){\n        if (!accessKey) {\n            accessKey = null;\n        }\n        if (options.timeout) {\n            if (typeof options.timeout !== \"number\") throw new TypeError(\"ERROR: 'options.timeout' should be a number\");\n        } else {\n            options.timeout = 15000;\n        }\n        // Import utilities for the classes.\n        this.__util = new util(accessKey, options);\n        /**\r\n\t\t * @augments User\r\n\t\t * @see {@Link AniList.User}\r\n\t\t * @since 1.0.0\r\n\t\t */ this.user = new User(this.__util);\n        /**\r\n\t\t * @augments lists\r\n\t\t * @see {@Link AniList.Lists}\r\n\t\t * @since 1.1.0\r\n\t\t */ this.lists = new lists(this.__util);\n        /**\r\n\t\t * @augments media\r\n\t\t * @see {@Link AniList.Media}\r\n\t\t * @since 1.0.0\r\n\t\t */ this.media = new media(this.__util);\n        /**\r\n\t\t * @augments people\r\n\t\t * @see {@Link AniList.People}\r\n\t\t * @since 1.0.0\r\n\t\t */ this.people = new people(this.__util);\n        /**\r\n\t\t * @augments Activity\r\n\t\t * @see {@Link AniList.Activity}\r\n\t\t * @since 1.7.0\r\n\t\t */ this.activity = new activity(this.__util);\n        /**\r\n\t\t * @augments Search\r\n\t\t * @see {@Link AniList.Search}\r\n\t\t * @since 1.7.0\r\n\t\t */ this.searchEntry = new searchEntry(this.__util);\n        /**\r\n\t\t * @augments Recommendation\r\n\t\t * @see {@Link AniList.Recommendation}\r\n\t\t * @since 1.8.0\r\n\t\t */ this.recommendation = new recommendation(this.__util);\n        /**\r\n\t\t * @augments Thread\r\n\t\t * @see {@Link AniList.Thread}\r\n\t\t * @since 1.11.0\r\n\t\t */ this.thread = new Thread(this.__util);\n    }\n    /**\r\n\t * Grabs data on a studio\r\n\t * @param {String | Number} studio - The studio ID or name on AniList.\r\n\t * @return { StudioEntry }\r\n\t * @since 1.0.0\r\n\t */ studio(studio) {\n        const queryVars = this.__util.generateQueryHeaders(\"Studio\", studio);\n        return this.__util.send(queryVars[1] + `id name isAnimationStudio siteUrl isFavourite favourites \r\n            media { nodes { id title { romaji english native userPreferred } } } } }`, queryVars[0]);\n    }\n    /**\r\n\t * [Requires Login] Favourite/Unfavourite a studio\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */ async favouriteStudio(id) {\n        if (!id || typeof id !== \"number\") {\n            throw new Error(\"AniList ID is not provided!\");\n        }\n        const data = await this.util.send(`mutation ($studioID: Int) {\r\n\t\t\t\tToggleFavourite(studioId: $studioID) {\r\n\t\t\t\t\tstudios (page: 1, perPage: 25) {\r\n\t\t\t\t\tnodes { id }\r\n\t\t\t} } }`, {\n            studioID: id\n        });\n        return data.ToggleFavourite.studios.nodes.some((e)=>{\n            if (e.id === id) {\n                return true;\n            }\n        });\n    }\n    /**\r\n\t * Searches AniList based on a specific term.\r\n\t * @param {String} type - Required. Either anime, manga, character, staff, studio, or user.\r\n\t * @param {String} term - Required. The term to lookup. (ie: \"Honzuki no Gekokujou\" or \"Butterstroke\")\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.0.0\r\n\t * @deprecated Please use {@link AniList.Search} class via `AniList.searchEntry` for updated searching. {@link AniList.Search} will replace\r\n\t * this function in the next major update (v2.0.0).\r\n\t */ search(type, term, page = 1, amount = 5) {\n        if (!type) {\n            throw new Error(\"Type of search not defined!\");\n        } else if (!term) {\n            throw new Error(\"Search term was not provided!\");\n        }\n        //Validate all type conditions.\n        if (typeof type !== \"string\") {\n            throw new Error(\"Type is not a string.\");\n        }\n        if (typeof term !== \"string\") {\n            throw new Error(\"Term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        const search = {\n            anime: \"media (type: ANIME, search: $search) { id title { romaji english native userPreferred } }\",\n            manga: \"media (type: MANGA, search: $search) { id title { romaji english native userPreferred } }\",\n            char: \"characters (search: $search) { id name { english: full } }\",\n            staff: \"staff (search: $search) { id name { english: full } }\",\n            studio: \"studios (search: $search) { id name }\",\n            user: \"users (search: $search) { id name }\"\n        };\n        let query = search[type.toLowerCase()];\n        if (!query) {\n            throw new Error(\"Type not supported.\");\n        }\n        return this.__util.send(`query ($page: Int, $perPage: Int, $search: String) {\r\n        Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } ${query} } }`, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Grabs all possible genres\r\n\t * @return { String[] }\r\n\t * @since 1.12.0\r\n\t */ genres() {\n        return this.__util.send(\"query { GenreCollection }\", null).then((data)=>{\n            return data.GenreCollection;\n        });\n    }\n    /**\r\n\t * Grabs all possible media tags\r\n\t * @return { MediaTag[] }\r\n\t * @since 1.12.0\r\n\t */ mediaTags() {\n        return this.__util.send(`query { MediaTagCollection {\r\n\t\t\t\tid name description category isAdult\r\n\t\t\t} }`, null).then((data)=>{\n            return data.MediaTagCollection;\n        });\n    }\n    /**\r\n\t * Grabs the site's statistics over the last seven days\r\n\t * @return { AniListStats }\r\n\t * @since 1.14.0\r\n\t */ siteStatistics() {\n        return this.__util.send(`query { SiteStatistics {\r\n\t\t\tusers (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t\tanime (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t\tmanga (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t\tcharacters (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t\tstaff (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t\tstudios (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t\treviews (sort: DATE_DESC, perPage: 7) { nodes { date count change } }\r\n\t\t} }`, null).then((data)=>{\n            return data.SiteStatistics;\n        });\n    }\n}\nmodule.exports = AniList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/lists.js":
/*!************************************************!*\
  !*** ./node_modules/anilist-node/lib/lists.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst headerBuilder = __webpack_require__(/*! ./utils/headerBuilder */ \"(rsc)/./node_modules/anilist-node/lib/utils/headerBuilder.js\");\n/**\r\n * Access a user's AniList list data.\r\n * @since 1.1.0\r\n * @memberof AniList\r\n */ class Lists {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Fetch a user's AniList anime lists.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserList }\r\n\t * @since 1.1.0\r\n\t */ anime(user) {\n        let queryVars = this.util.generateQueryHeaders(\"MediaListCollection\", user, \"ANIME\");\n        return this.util.send(queryVars[1] + `lists { name isCustomList isSplitCompletedList status entries { id\r\n            media { id idMal title { romaji english native userPreferred } \r\n            episodes description format startDate { year month day } endDate { year month day }\r\n            duration genres synonyms tags { name isMediaSpoiler } isFavourite isAdult siteUrl }\r\n            status score progress repeat priority private notes hiddenFromStatusLists\r\n            advancedScores startedAt { year month day } completedAt { year month day } updatedAt createdAt } } } }`, queryVars[0]);\n    }\n    /**\r\n\t * [Requires Login] Add an entry to a user's list.\r\n\t * @param {Number} id - The AniList ID of the entry to add\r\n\t * @param {UpdateEntryOptions} options - Values to save with.\r\n\t * @returns {UpdatedEntry}\r\n\t * @since 1.13.0\r\n\t */ async addEntry(id, options) {\n        if (typeof id !== \"number\") {\n            throw new Error(\"Provided ID is not a number!\");\n        }\n        if (typeof options !== \"object\") {\n            throw new Error(\"Provide options is not an object!\");\n        }\n        options.mediaId = id;\n        let query = headerBuilder(\"mutation\", \"SaveMediaListEntry\", options);\n        query += `id mediaId status score progress progressVolumes repeat priority private \r\n\t\thiddenFromStatusLists customLists startedAt { year month day } completedAt { year month day } notes advancedScores }}`;\n        return this.util.send(query).then((data)=>{\n            return data.SaveMediaListEntry;\n        });\n    }\n    /**\r\n\t * Fetch a user's AniList manga lists.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserList }\r\n\t * @since 1.1.0\r\n\t */ manga(user) {\n        let queryVars = this.util.generateQueryHeaders(\"MediaListCollection\", user, \"MANGA\");\n        return this.util.send(queryVars[1] + `lists { name isCustomList isSplitCompletedList status entries { id\r\n            media { id idMal title { romaji english native userPreferred } \r\n            volumes chapters description format startDate { year month day } endDate { year month day }\r\n            genres synonyms tags { name isMediaSpoiler } isFavourite isAdult siteUrl }\r\n            status score progress progressVolumes repeat priority private notes hiddenFromStatusLists\r\n            advancedScores startedAt { year month day } completedAt { year month day } updatedAt createdAt } } } }`, queryVars[0]);\n    }\n    /**\r\n\t * [Requires Login] Update a list entry to a user's list.\r\n\t * @param {Number} id - The AniList list ID of the entry to edit.\r\n\t * @param {UpdateEntryOptions} options - Values to save with.\r\n\t * @returns {UpdatedEntry}\r\n\t * @since 1.13.0\r\n\t */ async updateEntry(id, options) {\n        if (typeof id !== \"number\") {\n            throw new Error(\"Provided ID is not a number!\");\n        }\n        if (typeof options !== \"object\") {\n            throw new Error(\"Provide options is not an object!\");\n        }\n        options.id = id;\n        let query = headerBuilder(\"mutation\", \"SaveMediaListEntry\", options);\n        query += `id mediaId status score progress progressVolumes repeat priority private \r\n\t\thiddenFromStatusLists customLists startedAt { year month day } completedAt { year month day } notes advancedScores }}`;\n        return this.util.send(query).then((data)=>{\n            return data.SaveMediaListEntry;\n        });\n    }\n    /**\r\n\t * [Requires Login] Remove an entry from a user's lists.\r\n\t * @param {Number} id - The AniList list ID of the entry to remove.\r\n\t * @returns {Boolean} Returns true if removed, false otherwise.\r\n\t * @since 1.13.0\r\n\t */ async removeEntry(id) {\n        if (typeof id !== \"number\") {\n            throw new Error(\"Provided ID is not a number!\");\n        }\n        const query = `mutation { DeleteMediaListEntry(id:${id}) { deleted } }`;\n        return this.util.send(query).then((data)=>{\n            return data.DeleteMediaListEntry.deleted;\n        });\n    }\n}\nmodule.exports = Lists;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/lists.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/media.js":
/*!************************************************!*\
  !*** ./node_modules/anilist-node/lib/media.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\r\n * Access AniList's media data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */ \nclass Media {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Fetch an anime entry by its AniList ID.\r\n\t * @param { Number } id - Required. The ID tied to the AniList entry.\r\n\t * @returns { AnimeEntry }\r\n\t * @since 1.0.0\r\n\t */ anime(id) {\n        if (!id) {\n            throw new Error(\"Anime id is not provided!\");\n        }\n        if (typeof id !== \"number\") {\n            throw new Error(\"Term provided is not a number!\");\n        }\n        return this.util.send(`query ($id: Int) { Media (id: $id, type: ANIME) { id idMal title { romaji english native userPreferred } \r\n            format status episodes description startDate { year month day } endDate { year month day }\r\n            season seasonYear duration countryOfOrigin isLicensed source hashtag trailer { id site }\r\n            updatedAt coverImage { large:extraLarge medium:large small:medium color }\r\n            bannerImage genres synonyms averageScore meanScore favourites\r\n            popularity trending tags { id name isMediaSpoiler } relations { nodes { id title { english native romaji userPreferred } type } } \r\n            characters { nodes { id name { english: full } } } staff { nodes { id name { english: full } } } studios { nodes { id name isAnimationStudio } } \r\n            isFavourite isAdult isLocked nextAiringEpisode { timeUntilAiring airingAt episode } airingSchedule { nodes { airingAt timeUntilAiring episode } }\r\n            trends { nodes { date trending popularity inProgress } } externalLinks { url }\r\n            streamingEpisodes { title thumbnail url site } rankings { rank type context year season } mediaListEntry { id status }\r\n            reviews { nodes { id score summary body } } siteUrl autoCreateForumThread modNotes \r\n            stats { scoreDistribution { score amount } statusDistribution { status amount } }\r\n            isRecommendationBlocked recommendations { nodes { mediaRecommendation { id title { romaji english native userPreferred } type } } } } }`, {\n            id: id\n        });\n    }\n    /**\r\n\t * [Requires Login] Favourite/Unfavourite an anime\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */ async favouriteAnime(id) {\n        if (!id || typeof id !== \"number\") {\n            throw new Error(\"AniList ID is not provided!\");\n        }\n        const data = await this.util.send(`mutation ($mediaID: Int) {\r\n\t\t\t\tToggleFavourite(animeId: $mediaID) {\r\n\t\t\t\t\tanime (page: 1, perPage: 25) {\r\n\t\t\t\t\tnodes { id }\r\n\t\t\t} } }`, {\n            mediaID: id\n        });\n        return data.ToggleFavourite.anime.nodes.some((e)=>{\n            if (e.id === id) {\n                return true;\n            }\n        });\n    }\n    /**\r\n\t * Fetch a manga entry by its AniList ID.\r\n\t * @param { Number } id - Required. The ID tied to the AniList entry.\r\n\t * @returns { MangaEntry }\r\n\t * @since 1.0.0\r\n\t */ manga(id) {\n        if (!id) {\n            throw new Error(\"Manga id is not provided!\");\n        }\n        if (typeof id !== \"number\") {\n            throw new Error(\"Term provided is not a number!\");\n        }\n        return this.util.send(`query ($id: Int) { Media (id: $id, type: MANGA) { id idMal title { romaji english native userPreferred }\r\n            description format status startDate { year month day } endDate { year month day } chapters volumes countryOfOrigin isLicensed updatedAt\r\n            coverImage { large:extraLarge medium:large small:medium color } bannerImage genres synonyms averageScore meanScore siteUrl autoCreateForumThread modNotes\r\n            popularity trending tags { id name isMediaSpoiler } relations { nodes { id title { english native romaji userPreferred } type } }\r\n            characters { nodes { id name { english: full } } } staff { nodes { id name { english: full } } } isFavourite isAdult isLocked\r\n            trends { nodes { date trending popularity inProgress } } externalLinks { url } rankings { rank type context year season } \r\n            mediaListEntry { id status } reviews { nodes { id score summary body } } \r\n            stats { scoreDistribution { score amount } statusDistribution { status amount } } favourites\r\n            isRecommendationBlocked recommendations { nodes { mediaRecommendation { id title { romaji english native userPreferred } type } } } } }`, {\n            id: id\n        });\n    }\n    /**\r\n\t * [Requires Login] Favourite/Unfavourite a manga\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */ async favouriteManga(id) {\n        if (!id || typeof id !== \"number\") {\n            throw new Error(\"AniList ID is not provided!\");\n        }\n        const data = await this.util.send(`mutation ($mediaID: Int) {\r\n\t\t\t\tToggleFavourite(mangaId: $mediaID) {\r\n\t\t\t\t\tmanga (page: 1, perPage: 25) {\r\n\t\t\t\t\tnodes { id }\r\n\t\t\t} } }`, {\n            mediaID: id\n        });\n        return data.ToggleFavourite.manga.nodes.some((e)=>{\n            if (e.id === id) {\n                return true;\n            }\n        });\n    }\n}\nmodule.exports = Media;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/media.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/people.js":
/*!*************************************************!*\
  !*** ./node_modules/anilist-node/lib/people.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/**\r\n * Access AniList's characters and staff data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */ \nclass People {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Fetch a character entry by its AniList ID.\r\n\t * @param { Number|String } id - Required. The ID tied to the AniList entry.\r\n\t * @returns { CharacterEntry }\r\n\t * @since 1.0.0\r\n\t */ character(id) {\n        let queryVars = this.util.generateQueryHeaders(\"Character\", id);\n        return this.util.send(queryVars[1] + `id name { english: full native alternative alternativeSpoiler userPreferred } \r\n\t\t\t\timage { large medium } gender dateOfBirth { year month day } age bloodType description \r\n\t\t\t\tisFavourite favourites isFavouriteBlocked \r\n        \t\tmedia { nodes { id title { romaji english native userPreferred } type } } } }`, queryVars[0]);\n    }\n    /**\r\n\t * [Requires Login] Favourite/Unfavourite a character\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */ async favouriteChar(id) {\n        if (!id || typeof id !== \"number\") {\n            throw new Error(\"AniList ID is not provided!\");\n        }\n        const data = await this.util.send(`mutation ($charID: Int) {\r\n\t\t\t\tToggleFavourite(characterId: $charID) {\r\n\t\t\t\t  characters (page: 1, perPage: 25) {\r\n\t\t\t\t\tnodes { id }\r\n\t\t\t} } }`, {\n            charID: id\n        });\n        return data.ToggleFavourite.characters.nodes.some((e)=>{\n            if (e.id === id) {\n                return true;\n            }\n        });\n    }\n    /**\r\n\t * Get all characters who's birthday is today\r\n\t * @param { Number } page - What page in the search to target. Defaults at 1.\r\n\t * @returns { PersonRelation[] }\r\n\t * @since 1.14.0\r\n\t */ async getBirthdayCharacters(page = 1) {\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        const data = await this.util.send(`query ($page: Int) { Page (page: $page) {\r\n\t\t\t\tcharacters (isBirthday: true) {\r\n\t\t\t\t\tid name { english: full }\r\n\t\t\t} } }`, {\n            page: page\n        });\n        return data.Page.characters;\n    }\n    /**\r\n\t * Fetch a staff entry by its AniList ID or their name.\r\n\t * @param { Number|String } id - Required. The ID can either be the AniList ID or the staff's name.\r\n\t * @returns { StaffEntry }\r\n\t * @since 1.0.0\r\n\t */ staff(id) {\n        let queryVars = this.util.generateQueryHeaders(\"Staff\", id);\n        return this.util.send(queryVars[1] + `id name { english: full native alternative userPreferred } language: languageV2 image { large medium }\r\n            \tdescription primaryOccupations gender dateOfBirth { year month day } dateOfDeath { year month day }\r\n\t\t\t\tage yearsActive homeTown bloodType isFavourite isFavouriteBlocked favourites\r\n            \tstaffMedia { nodes { id title { romaji english native userPreferred } type } }\r\n            \tcharacters { nodes { id name { english: full } } }\r\n\t\t\t\tcharacterMedia { nodes { id title { romaji english native userPreferred } type } } } }`, queryVars[0]);\n    }\n    /**\r\n\t * [Requires Login] Favourite/Unfavourite a staff entry\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */ async favouriteStaff(id) {\n        if (!id || typeof id !== \"number\") {\n            throw new Error(\"AniList ID is not provided!\");\n        }\n        const data = await this.util.send(`mutation ($staffID: Int) {\r\n\t\t\t\tToggleFavourite(staffId: $staffID) {\r\n\t\t\t\t  staff (page: 1, perPage: 25) { \r\n\t\t\t\t\tnodes { id } \r\n\t\t\t} } }`, {\n            staffID: id\n        });\n        return data.ToggleFavourite.staff.nodes.some((e)=>{\n            if (e.id === id) {\n                return true;\n            }\n        });\n    }\n    /**\r\n\t * Get all staff entries who's birthday is today\r\n\t * @param { Number } page - What page in the search to target. Defaults at 1.\r\n\t * @returns { PersonRelation[] }\r\n\t * @since 1.14.0\r\n\t */ async getBirthdayStaff(page = 1) {\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        const data = await this.util.send(`query ($page: Int) { Page (page: $page) {\r\n\t\t\t\tstaff (isBirthday: true) {\r\n\t\t\t\t\tid name { english: full }\r\n\t\t\t} } }`, {\n            page: page\n        });\n        return data.Page.staff;\n    }\n}\nmodule.exports = People;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/people.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/recommendation.js":
/*!*********************************************************!*\
  !*** ./node_modules/anilist-node/lib/recommendation.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("/**\r\n * Access recommendations on AniList\r\n * @since 1.8.0\r\n * @memberof AniList\r\n */ \nclass Recommendation {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Get AniList recommendations for a media.\r\n\t * @param {Number} mediaID The AniList media ID\r\n\t * @param {Number} page Target a specific page number for recommended.\r\n\t * @param {Number} perPage Limits the page amount to a specific number. 25 is max as per AniList limits.\r\n\t * @returns {RecommendationList}\r\n\t * @since 1.8.0\r\n\t */ getList(mediaID, page = 1, perPage = 25) {\n        if (typeof mediaID !== \"number\") {\n            throw new Error(\"mediaID is not a number type!\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"page is not a number type!\");\n        }\n        if (typeof perPage !== \"number\") {\n            throw new Error(\"perPage is not a number type!\");\n        }\n        const recommendQuery = `query ($page: Int, $perPage: Int, $id: Int) { Recommendation (mediaId: $id) {\r\n            media { id title { romaji english native userPreferred } type } }\r\n            Page(page: $page, perPage: $perPage) { recommendations(mediaId: $id, sort: RATING_DESC) {\r\n            rating userRating user { id name } id\r\n            mediaRecommendation { id title { romaji english native userPreferred } type } } } }`;\n        return this.util.send(recommendQuery, {\n            id: mediaID,\n            page: page,\n            perPage: perPage\n        });\n    }\n    /**\r\n\t * Get an AniList recommendation via its ID\r\n\t * @param {Number} recommendID The AniList recommendation ID\r\n\t * @returns {SingleRecommendation}\r\n\t * @since 1.8.0\r\n\t */ get(recommendID) {\n        if (typeof recommendID !== \"number\") {\n            throw new Error(\"recommendID is not a number type!\");\n        }\n        const recommendQuery = `query ($id: Int) { Recommendation (id: $id) {\r\n            id rating userRating\r\n            media { id title { romaji english native userPreferred } type } \r\n            mediaRecommendation { id title { romaji english native userPreferred } type }\r\n            user { id name } } }`;\n        return this.util.send(recommendQuery, {\n            id: recommendID\n        }).then((data)=>{\n            return data.Recommendation;\n        });\n    }\n}\nmodule.exports = Recommendation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi9yZWNvbW1lbmRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDO0FBQ0QsTUFBTUE7SUFDTDs7Ozs7RUFLQyxHQUNEQyxZQUFZQyxTQUFTLENBQUU7UUFDdEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdEO0lBQ2I7SUFFQTs7Ozs7OztFQU9DLEdBQ0RFLFFBQVFDLE9BQU8sRUFBRUMsT0FBTyxDQUFDLEVBQUVDLFVBQVUsRUFBRSxFQUFFO1FBQ3hDLElBQUksT0FBT0YsWUFBWSxVQUFVO1lBQ2hDLE1BQU0sSUFBSUcsTUFBTTtRQUNqQjtRQUNBLElBQUksT0FBT0YsU0FBUyxVQUFVO1lBQzdCLE1BQU0sSUFBSUUsTUFBTTtRQUNqQjtRQUNBLElBQUksT0FBT0QsWUFBWSxVQUFVO1lBQ2hDLE1BQU0sSUFBSUMsTUFBTTtRQUNqQjtRQUVBLE1BQU1DLGlCQUFpQixDQUFDOzs7OytGQUlxRSxDQUFDO1FBRTlGLE9BQU8sSUFBSSxDQUFDTixJQUFJLENBQUNPLElBQUksQ0FBQ0QsZ0JBQWdCO1lBQUVFLElBQUlOO1lBQVNDLE1BQU1BO1lBQU1DLFNBQVNBO1FBQVE7SUFDbkY7SUFFQTs7Ozs7RUFLQyxHQUNESyxJQUFJQyxXQUFXLEVBQUU7UUFDaEIsSUFBSSxPQUFPQSxnQkFBZ0IsVUFBVTtZQUNwQyxNQUFNLElBQUlMLE1BQU07UUFDakI7UUFFQSxNQUFNQyxpQkFBaUIsQ0FBQzs7OztnQ0FJTSxDQUFDO1FBRS9CLE9BQU8sSUFBSSxDQUFDTixJQUFJLENBQUNPLElBQUksQ0FBQ0QsZ0JBQWdCO1lBQUVFLElBQUlFO1FBQVksR0FBR0MsSUFBSSxDQUFDLENBQUNDO1lBQ2hFLE9BQU9BLEtBQUtmLGNBQWM7UUFDM0I7SUFDRDtBQUNEO0FBRUFnQixPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1haWQvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi9yZWNvbW1lbmRhdGlvbi5qcz9kYzJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBY2Nlc3MgcmVjb21tZW5kYXRpb25zIG9uIEFuaUxpc3RcclxuICogQHNpbmNlIDEuOC4wXHJcbiAqIEBtZW1iZXJvZiBBbmlMaXN0XHJcbiAqL1xyXG5jbGFzcyBSZWNvbW1lbmRhdGlvbiB7XHJcblx0LyoqXHJcblx0ICogQGRlc2NyaXB0aW9uIFRoaXMgY29uc3RydWN0b3IgaXMgbWVhbnQgZm9yIGludGVybmFsIHVzZSBhbmQgaXMgYXBhcnQgb2YgaW5pdGlhbGl6aW5nLiBZb3UgY2Fubm90IGFjY2VzcyB0aGlzXHJcblx0ICogdGhyb3VnaCB0aGUgQW5pTGlzdCBjbGFzcyBhbmQgYXJlIG5vdCBleHBlY3QgdG8uXHJcblx0ICogQHBhcmFtIHsgVXRpbGl0aWVzIH0gdXRpbGl0aWVzIC0gVGhlIEFuaUxpc3QgVXRpbGl0aWVzIGNsYXNzLlxyXG5cdCAqIEBoaWRlY29uc3RydWN0b3JcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih1dGlsaXRpZXMpIHtcclxuXHRcdHRoaXMudXRpbCA9IHV0aWxpdGllcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCBBbmlMaXN0IHJlY29tbWVuZGF0aW9ucyBmb3IgYSBtZWRpYS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gbWVkaWFJRCBUaGUgQW5pTGlzdCBtZWRpYSBJRFxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwYWdlIFRhcmdldCBhIHNwZWNpZmljIHBhZ2UgbnVtYmVyIGZvciByZWNvbW1lbmRlZC5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGVyUGFnZSBMaW1pdHMgdGhlIHBhZ2UgYW1vdW50IHRvIGEgc3BlY2lmaWMgbnVtYmVyLiAyNSBpcyBtYXggYXMgcGVyIEFuaUxpc3QgbGltaXRzLlxyXG5cdCAqIEByZXR1cm5zIHtSZWNvbW1lbmRhdGlvbkxpc3R9XHJcblx0ICogQHNpbmNlIDEuOC4wXHJcblx0ICovXHJcblx0Z2V0TGlzdChtZWRpYUlELCBwYWdlID0gMSwgcGVyUGFnZSA9IDI1KSB7XHJcblx0XHRpZiAodHlwZW9mIG1lZGlhSUQgIT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwibWVkaWFJRCBpcyBub3QgYSBudW1iZXIgdHlwZSFcIik7XHJcblx0XHR9XHJcblx0XHRpZiAodHlwZW9mIHBhZ2UgIT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwicGFnZSBpcyBub3QgYSBudW1iZXIgdHlwZSFcIik7XHJcblx0XHR9XHJcblx0XHRpZiAodHlwZW9mIHBlclBhZ2UgIT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwicGVyUGFnZSBpcyBub3QgYSBudW1iZXIgdHlwZSFcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgcmVjb21tZW5kUXVlcnkgPSBgcXVlcnkgKCRwYWdlOiBJbnQsICRwZXJQYWdlOiBJbnQsICRpZDogSW50KSB7IFJlY29tbWVuZGF0aW9uIChtZWRpYUlkOiAkaWQpIHtcclxuICAgICAgICAgICAgbWVkaWEgeyBpZCB0aXRsZSB7IHJvbWFqaSBlbmdsaXNoIG5hdGl2ZSB1c2VyUHJlZmVycmVkIH0gdHlwZSB9IH1cclxuICAgICAgICAgICAgUGFnZShwYWdlOiAkcGFnZSwgcGVyUGFnZTogJHBlclBhZ2UpIHsgcmVjb21tZW5kYXRpb25zKG1lZGlhSWQ6ICRpZCwgc29ydDogUkFUSU5HX0RFU0MpIHtcclxuICAgICAgICAgICAgcmF0aW5nIHVzZXJSYXRpbmcgdXNlciB7IGlkIG5hbWUgfSBpZFxyXG4gICAgICAgICAgICBtZWRpYVJlY29tbWVuZGF0aW9uIHsgaWQgdGl0bGUgeyByb21hamkgZW5nbGlzaCBuYXRpdmUgdXNlclByZWZlcnJlZCB9IHR5cGUgfSB9IH0gfWA7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudXRpbC5zZW5kKHJlY29tbWVuZFF1ZXJ5LCB7IGlkOiBtZWRpYUlELCBwYWdlOiBwYWdlLCBwZXJQYWdlOiBwZXJQYWdlIH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGFuIEFuaUxpc3QgcmVjb21tZW5kYXRpb24gdmlhIGl0cyBJRFxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSByZWNvbW1lbmRJRCBUaGUgQW5pTGlzdCByZWNvbW1lbmRhdGlvbiBJRFxyXG5cdCAqIEByZXR1cm5zIHtTaW5nbGVSZWNvbW1lbmRhdGlvbn1cclxuXHQgKiBAc2luY2UgMS44LjBcclxuXHQgKi9cclxuXHRnZXQocmVjb21tZW5kSUQpIHtcclxuXHRcdGlmICh0eXBlb2YgcmVjb21tZW5kSUQgIT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwicmVjb21tZW5kSUQgaXMgbm90IGEgbnVtYmVyIHR5cGUhXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHJlY29tbWVuZFF1ZXJ5ID0gYHF1ZXJ5ICgkaWQ6IEludCkgeyBSZWNvbW1lbmRhdGlvbiAoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICBpZCByYXRpbmcgdXNlclJhdGluZ1xyXG4gICAgICAgICAgICBtZWRpYSB7IGlkIHRpdGxlIHsgcm9tYWppIGVuZ2xpc2ggbmF0aXZlIHVzZXJQcmVmZXJyZWQgfSB0eXBlIH0gXHJcbiAgICAgICAgICAgIG1lZGlhUmVjb21tZW5kYXRpb24geyBpZCB0aXRsZSB7IHJvbWFqaSBlbmdsaXNoIG5hdGl2ZSB1c2VyUHJlZmVycmVkIH0gdHlwZSB9XHJcbiAgICAgICAgICAgIHVzZXIgeyBpZCBuYW1lIH0gfSB9YDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy51dGlsLnNlbmQocmVjb21tZW5kUXVlcnksIHsgaWQ6IHJlY29tbWVuZElEIH0pLnRoZW4oKGRhdGEpID0+IHtcclxuXHRcdFx0cmV0dXJuIGRhdGEuUmVjb21tZW5kYXRpb247XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVjb21tZW5kYXRpb247XHJcbiJdLCJuYW1lcyI6WyJSZWNvbW1lbmRhdGlvbiIsImNvbnN0cnVjdG9yIiwidXRpbGl0aWVzIiwidXRpbCIsImdldExpc3QiLCJtZWRpYUlEIiwicGFnZSIsInBlclBhZ2UiLCJFcnJvciIsInJlY29tbWVuZFF1ZXJ5Iiwic2VuZCIsImlkIiwiZ2V0IiwicmVjb21tZW5kSUQiLCJ0aGVuIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/recommendation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/search.js":
/*!*************************************************!*\
  !*** ./node_modules/anilist-node/lib/search.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst filterBuilder = __webpack_require__(/*! ./utils/filters */ \"(rsc)/./node_modules/anilist-node/lib/utils/filters.js\");\n/**\r\n * Search for items on AniList\r\n * @since 1.7.0\r\n * @memberof AniList\r\n */ class Search {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Search for a specific character\r\n\t * @param {String} term - Required. The term to lookup. (ie: \"Myne\" or \"Chise Hatori\")\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.7.0\r\n\t */ character(term, page = 1, amount = 5) {\n        if (!term) {\n            throw new Error(\"Search term was not provided!\");\n        }\n        //Validate all type conditions.\n        if (typeof term !== \"string\") {\n            throw new Error(\"Term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        return this.util.send(`query ($page: Int, $perPage: Int, $search: String) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            characters (search: $search) { id name { english: full } } } }`, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Search for a specific studio\r\n\t * @param {String} term - Required. The term to lookup. (ie: \"White Fox\")\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.7.0\r\n\t */ studio(term, page = 1, amount = 5) {\n        if (!term) {\n            throw new Error(\"Search term was not provided!\");\n        }\n        //Validate all type conditions.\n        if (typeof term !== \"string\") {\n            throw new Error(\"Term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        return this.util.send(`query ($page: Int, $perPage: Int, $search: String) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            studios (search: $search) { id name } } }`, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Search for a specific staff member\r\n\t * @param {String} term - Required. The term to lookup. (ie: \"Yuka Iguchi\")\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.7.0\r\n\t */ staff(term, page = 1, amount = 5) {\n        if (!term) {\n            throw new Error(\"Search term was not provided!\");\n        }\n        //Validate all type conditions.\n        if (typeof term !== \"string\") {\n            throw new Error(\"Term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        return this.util.send(`query ($page: Int, $perPage: Int, $search: String) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            staff (search: $search) { id name { english: full } } } }`, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Search for a specific user\r\n\t * @param {String} term - Required. The term to lookup. (ie: \"Butterstroke\")\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.7.0\r\n\t */ user(term, page = 1, amount = 5) {\n        if (!term) {\n            throw new Error(\"Search term was not provided!\");\n        }\n        //Validate all type conditions.\n        if (typeof term !== \"string\") {\n            throw new Error(\"Term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        return this.util.send(`query ($page: Int, $perPage: Int, $search: String) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            users (search: $search) { id name } } }`, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Search for a specific anime\r\n\t * @param {String} term - The term to lookup. (ie: \"Log Horizon\"). For no term, input a null value\r\n\t * @param {Object} filter - A key-value paired object to filter search data.\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.7.0\r\n\t */ anime(term = null, filter = null, page = 1, amount = 5) {\n        if (term && typeof term !== \"string\") {\n            throw new Error(\"Search term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        let query = filterBuilder(\"anime\", filter);\n        query += \"id title { romaji english native userPreferred } } } }\";\n        return this.util.send(query, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Search for a specific manga\r\n\t * @param {String} term - The term to lookup. (ie: \"Mahoutsukai no Yome\"). For no term, input a null value.\r\n\t * @param {Object} filter - A key-value paired object to filter search data.\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { SearchEntry }\r\n\t * @since 1.7.0\r\n\t */ manga(term = null, filter = null, page = 1, amount = 5) {\n        if (term && typeof term !== \"string\") {\n            throw new Error(\"Search term is not a string\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        let query = filterBuilder(\"manga\", filter);\n        query += \"id title { romaji english native userPreferred } } } }\";\n        return this.util.send(query, {\n            search: term,\n            page: page,\n            perPage: amount\n        });\n    }\n    /**\r\n\t * Search for a specific activity\r\n\t * @param {Number} activityID - The activityID to lookup. (ie: 152876349). For no term, input a null value.\r\n\t * @param {Object} filter - A key-value paired object to filter search data.\r\n\t * @param {Number} page - Which page of the results to look at. Will default to 1 if not provided.\r\n\t * @param {Number} amount - The amount of results per page. AniList will cap this at 25 and function will default to 5 if not provided.\r\n\t * @return { ActivityEntry }\r\n\t * @since 1.7.0\r\n\t */ activity(activityID = null, filter = null, page = 1, amount = 5) {\n        if (activityID && typeof activityID !== \"number\") {\n            throw new Error(\"activityID is not a number.\");\n        }\n        if (typeof page !== \"number\") {\n            throw new Error(\"Page number is not a number\");\n        }\n        if (typeof amount !== \"number\") {\n            throw new Error(\"Amount is not a number\");\n        }\n        let query = filterBuilder(\"activity\", filter);\n        query += `... on ListActivity { id type createdAt likeCount }\r\n        ... on TextActivity { id type createdAt likeCount }\r\n        ... on MessageActivity { id type createdAt likeCount }}}}`;\n        return this.util.send(query, {\n            id: activityID,\n            page: page,\n            perPage: amount\n        });\n    }\n}\nmodule.exports = Search;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/thread.js":
/*!*************************************************!*\
  !*** ./node_modules/anilist-node/lib/thread.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/**\r\n * Access threads on AniList\r\n * @since 1.11.0\r\n * @memberof AniList\r\n */ \nclass Thread {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Get a specific thread by its AniList ID\r\n\t * @param {Number} id - The AniList ID of the thread\r\n\t *\r\n\t * @returns {ThreadEntry}\r\n\t * @since 1.11.0\r\n\t */ get(id) {\n        let queryVars = this.util.generateQueryHeaders(\"Thread\", id);\n        return this.util.send(`${queryVars[1]}\r\n\t\t\tid title body user { id name } replyCommentId\r\n\t\t\tviewCount isLocked isSticky isSubscribed replyUser { id name }\r\n\t\t\tisLiked repliedAt createdAt updatedAt\r\n\t\t\tlikes { id name } categories { id name }\r\n\t\t\tmediaCategories { id title { english native romaji userPreferred } type }\r\n\t  \t\t} }`, queryVars[0]).then((data)=>{\n            return data.Thread;\n        });\n    }\n    /**\r\n\t * [Require Login] Delete a thread\r\n\t * @param {Number} id - The AniList thread ID to delete\r\n\t *\r\n\t * @returns {Boolean} Returns true if successful\r\n\t * @since 1.12.0\r\n\t */ async delete(id) {\n        if (typeof id !== \"number\") {\n            throw new Error(\"ID is not a number type.\");\n        }\n        return this.util.send(`mutation ($id: Int) { DeleteThread(id: $id) { deleted } }`, {\n            id: id\n        }).then((data)=>{\n            return data.DeleteThread.deleted;\n        });\n    }\n    /**\r\n\t * Get thread comments for a thread\r\n\t * @param {Number} id - The AniList thread ID\r\n\t * @param {Number} page - The page number\r\n\t * @param {Number} perPage - How many entries per page\r\n\t *\r\n\t * @returns {ThreadComment[]}\r\n\t * @since 1.12.0\r\n\t */ getComments(id, page = 1, perPage = 25) {\n        if (typeof id !== \"number\") {\n            throw new Error(\"ID is not a number type.\");\n        }\n        return this.util.send(`query ($threadID: Int, $page: Int, $perPage: Int) {\r\n\t\t\t\tPage(page:$page, perPage:$perPage) {\r\n\t\t\t\tthreadComments(threadId: $threadID) {\r\n\t\t\t   \t\tid user { id name } comment isLiked createdAt updatedAt\r\n\t\t\t   \t\tlikes { id name } childComments isLocked\r\n\t\t\t\t} } }`, {\n            threadID: id,\n            page: page,\n            perPage: perPage\n        }).then((data)=>{\n            return data.threadComments;\n        });\n    }\n}\nmodule.exports = Thread;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi90aHJlYWQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQztBQUNELE1BQU1BO0lBQ0w7Ozs7O0VBS0MsR0FDREMsWUFBWUMsU0FBUyxDQUFFO1FBQ3RCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRDtJQUNiO0lBRUE7Ozs7OztFQU1DLEdBQ0RFLElBQUlDLEVBQUUsRUFBRTtRQUNQLElBQUlDLFlBQVksSUFBSSxDQUFDSCxJQUFJLENBQUNJLG9CQUFvQixDQUFDLFVBQVVGO1FBRXpELE9BQU8sSUFBSSxDQUFDRixJQUFJLENBQ2RLLElBQUksQ0FDSixDQUFDLEVBQUVGLFNBQVMsQ0FBQyxFQUFFLENBQUM7Ozs7OztRQU1aLENBQUMsRUFDTEEsU0FBUyxDQUFDLEVBQUUsRUFFWkcsSUFBSSxDQUFDLENBQUNDO1lBQ04sT0FBT0EsS0FBS1YsTUFBTTtRQUNuQjtJQUNGO0lBRUE7Ozs7OztFQU1DLEdBQ0QsTUFBTVcsT0FBT04sRUFBRSxFQUFFO1FBQ2hCLElBQUksT0FBT0EsT0FBTyxVQUFVO1lBQzNCLE1BQU0sSUFBSU8sTUFBTTtRQUNqQjtRQUVBLE9BQU8sSUFBSSxDQUFDVCxJQUFJLENBQUNLLElBQUksQ0FBQyxDQUFDLHlEQUF5RCxDQUFDLEVBQUU7WUFBRUgsSUFBSUE7UUFBRyxHQUFHSSxJQUFJLENBQUMsQ0FBQ0M7WUFDcEcsT0FBT0EsS0FBS0csWUFBWSxDQUFDQyxPQUFPO1FBQ2pDO0lBQ0Q7SUFFQTs7Ozs7Ozs7RUFRQyxHQUNEQyxZQUFZVixFQUFFLEVBQUVXLE9BQU8sQ0FBQyxFQUFFQyxVQUFVLEVBQUUsRUFBRTtRQUN2QyxJQUFJLE9BQU9aLE9BQU8sVUFBVTtZQUMzQixNQUFNLElBQUlPLE1BQU07UUFDakI7UUFFQSxPQUFPLElBQUksQ0FBQ1QsSUFBSSxDQUNkSyxJQUFJLENBQ0osQ0FBQzs7Ozs7U0FLSSxDQUFDLEVBQ047WUFBRVUsVUFBVWI7WUFBSVcsTUFBTUE7WUFBTUMsU0FBU0E7UUFBUSxHQUU3Q1IsSUFBSSxDQUFDLENBQUNDO1lBQ04sT0FBT0EsS0FBS1MsY0FBYztRQUMzQjtJQUNGO0FBQ0Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYWlkLy4vbm9kZV9tb2R1bGVzL2FuaWxpc3Qtbm9kZS9saWIvdGhyZWFkLmpzPzNlYTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFjY2VzcyB0aHJlYWRzIG9uIEFuaUxpc3RcclxuICogQHNpbmNlIDEuMTEuMFxyXG4gKiBAbWVtYmVyb2YgQW5pTGlzdFxyXG4gKi9cclxuY2xhc3MgVGhyZWFkIHtcclxuXHQvKipcclxuXHQgKiBAZGVzY3JpcHRpb24gVGhpcyBjb25zdHJ1Y3RvciBpcyBtZWFudCBmb3IgaW50ZXJuYWwgdXNlIGFuZCBpcyBhcGFydCBvZiBpbml0aWFsaXppbmcuIFlvdSBjYW5ub3QgYWNjZXNzIHRoaXNcclxuXHQgKiB0aHJvdWdoIHRoZSBBbmlMaXN0IGNsYXNzIGFuZCBhcmUgbm90IGV4cGVjdCB0by5cclxuXHQgKiBAcGFyYW0geyBVdGlsaXRpZXMgfSB1dGlsaXRpZXMgLSBUaGUgQW5pTGlzdCBVdGlsaXRpZXMgY2xhc3MuXHJcblx0ICogQGhpZGVjb25zdHJ1Y3RvclxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHV0aWxpdGllcykge1xyXG5cdFx0dGhpcy51dGlsID0gdXRpbGl0aWVzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGEgc3BlY2lmaWMgdGhyZWFkIGJ5IGl0cyBBbmlMaXN0IElEXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIEFuaUxpc3QgSUQgb2YgdGhlIHRocmVhZFxyXG5cdCAqXHJcblx0ICogQHJldHVybnMge1RocmVhZEVudHJ5fVxyXG5cdCAqIEBzaW5jZSAxLjExLjBcclxuXHQgKi9cclxuXHRnZXQoaWQpIHtcclxuXHRcdGxldCBxdWVyeVZhcnMgPSB0aGlzLnV0aWwuZ2VuZXJhdGVRdWVyeUhlYWRlcnMoXCJUaHJlYWRcIiwgaWQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnV0aWxcclxuXHRcdFx0LnNlbmQoXHJcblx0XHRcdFx0YCR7cXVlcnlWYXJzWzFdfVxyXG5cdFx0XHRpZCB0aXRsZSBib2R5IHVzZXIgeyBpZCBuYW1lIH0gcmVwbHlDb21tZW50SWRcclxuXHRcdFx0dmlld0NvdW50IGlzTG9ja2VkIGlzU3RpY2t5IGlzU3Vic2NyaWJlZCByZXBseVVzZXIgeyBpZCBuYW1lIH1cclxuXHRcdFx0aXNMaWtlZCByZXBsaWVkQXQgY3JlYXRlZEF0IHVwZGF0ZWRBdFxyXG5cdFx0XHRsaWtlcyB7IGlkIG5hbWUgfSBjYXRlZ29yaWVzIHsgaWQgbmFtZSB9XHJcblx0XHRcdG1lZGlhQ2F0ZWdvcmllcyB7IGlkIHRpdGxlIHsgZW5nbGlzaCBuYXRpdmUgcm9tYWppIHVzZXJQcmVmZXJyZWQgfSB0eXBlIH1cclxuXHQgIFx0XHR9IH1gLFxyXG5cdFx0XHRcdHF1ZXJ5VmFyc1swXVxyXG5cdFx0XHQpXHJcblx0XHRcdC50aGVuKChkYXRhKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGEuVGhyZWFkO1xyXG5cdFx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFtSZXF1aXJlIExvZ2luXSBEZWxldGUgYSB0aHJlYWRcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gaWQgLSBUaGUgQW5pTGlzdCB0aHJlYWQgSUQgdG8gZGVsZXRlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHN1Y2Nlc3NmdWxcclxuXHQgKiBAc2luY2UgMS4xMi4wXHJcblx0ICovXHJcblx0YXN5bmMgZGVsZXRlKGlkKSB7XHJcblx0XHRpZiAodHlwZW9mIGlkICE9PSBcIm51bWJlclwiKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIklEIGlzIG5vdCBhIG51bWJlciB0eXBlLlwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy51dGlsLnNlbmQoYG11dGF0aW9uICgkaWQ6IEludCkgeyBEZWxldGVUaHJlYWQoaWQ6ICRpZCkgeyBkZWxldGVkIH0gfWAsIHsgaWQ6IGlkIH0pLnRoZW4oKGRhdGEpID0+IHtcclxuXHRcdFx0cmV0dXJuIGRhdGEuRGVsZXRlVGhyZWFkLmRlbGV0ZWQ7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0aHJlYWQgY29tbWVudHMgZm9yIGEgdGhyZWFkXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGlkIC0gVGhlIEFuaUxpc3QgdGhyZWFkIElEXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhZ2UgLSBUaGUgcGFnZSBudW1iZXJcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGVyUGFnZSAtIEhvdyBtYW55IGVudHJpZXMgcGVyIHBhZ2VcclxuXHQgKlxyXG5cdCAqIEByZXR1cm5zIHtUaHJlYWRDb21tZW50W119XHJcblx0ICogQHNpbmNlIDEuMTIuMFxyXG5cdCAqL1xyXG5cdGdldENvbW1lbnRzKGlkLCBwYWdlID0gMSwgcGVyUGFnZSA9IDI1KSB7XHJcblx0XHRpZiAodHlwZW9mIGlkICE9PSBcIm51bWJlclwiKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIklEIGlzIG5vdCBhIG51bWJlciB0eXBlLlwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy51dGlsXHJcblx0XHRcdC5zZW5kKFxyXG5cdFx0XHRcdGBxdWVyeSAoJHRocmVhZElEOiBJbnQsICRwYWdlOiBJbnQsICRwZXJQYWdlOiBJbnQpIHtcclxuXHRcdFx0XHRQYWdlKHBhZ2U6JHBhZ2UsIHBlclBhZ2U6JHBlclBhZ2UpIHtcclxuXHRcdFx0XHR0aHJlYWRDb21tZW50cyh0aHJlYWRJZDogJHRocmVhZElEKSB7XHJcblx0XHRcdCAgIFx0XHRpZCB1c2VyIHsgaWQgbmFtZSB9IGNvbW1lbnQgaXNMaWtlZCBjcmVhdGVkQXQgdXBkYXRlZEF0XHJcblx0XHRcdCAgIFx0XHRsaWtlcyB7IGlkIG5hbWUgfSBjaGlsZENvbW1lbnRzIGlzTG9ja2VkXHJcblx0XHRcdFx0fSB9IH1gLFxyXG5cdFx0XHRcdHsgdGhyZWFkSUQ6IGlkLCBwYWdlOiBwYWdlLCBwZXJQYWdlOiBwZXJQYWdlIH1cclxuXHRcdFx0KVxyXG5cdFx0XHQudGhlbigoZGF0YSkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBkYXRhLnRocmVhZENvbW1lbnRzO1xyXG5cdFx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVGhyZWFkO1xyXG4iXSwibmFtZXMiOlsiVGhyZWFkIiwiY29uc3RydWN0b3IiLCJ1dGlsaXRpZXMiLCJ1dGlsIiwiZ2V0IiwiaWQiLCJxdWVyeVZhcnMiLCJnZW5lcmF0ZVF1ZXJ5SGVhZGVycyIsInNlbmQiLCJ0aGVuIiwiZGF0YSIsImRlbGV0ZSIsIkVycm9yIiwiRGVsZXRlVGhyZWFkIiwiZGVsZXRlZCIsImdldENvbW1lbnRzIiwicGFnZSIsInBlclBhZ2UiLCJ0aHJlYWRJRCIsInRocmVhZENvbW1lbnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/thread.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/types/activityFilterTypes.js":
/*!********************************************************************!*\
  !*** ./node_modules/anilist-node/lib/types/activityFilterTypes.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("/* eslint-disable camelcase */ /**\r\n * @type {ActivityFilterTypes}\r\n * @ignore\r\n */ \nconst activityFilterTypes = {\n    id: \"number\",\n    userId: \"number\",\n    messengerId: \"number\",\n    mediaId: \"number\",\n    type: \"string\",\n    isFollowing: \"boolean\",\n    hasReplies: \"boolean\",\n    hasRepliesOrTypeText: \"boolean\",\n    createdAt: \"number\",\n    id_not: \"number\",\n    id_in: [\n        \"number\"\n    ],\n    id_not_in: [\n        \"number\"\n    ],\n    userId_not: \"number\",\n    userId_in: [\n        \"number\"\n    ],\n    userId_not_in: [\n        \"number\"\n    ],\n    messengerId_not: \"number\",\n    messengerId_in: [\n        \"number\"\n    ],\n    messengerId_not_in: [\n        \"number\"\n    ],\n    mediaId_not: \"number\",\n    mediaId_in: [\n        \"number\"\n    ],\n    mediaId_not_in: [\n        \"number\"\n    ],\n    type_not: \"string\",\n    type_in: [\n        \"string\"\n    ],\n    type_not_in: [\n        \"string\"\n    ],\n    createdAt_greater: \"number\",\n    createdAt_lesser: \"number\",\n    sort: [\n        \"string\"\n    ] // ActivitySort -> String\n};\nObject.freeze(activityFilterTypes);\nmodule.exports = activityFilterTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi90eXBlcy9hY3Rpdml0eUZpbHRlclR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QixHQUM1Qjs7O0NBR0M7QUFDRCxNQUFNQSxzQkFBc0I7SUFDM0JDLElBQUk7SUFDSkMsUUFBUTtJQUNSQyxhQUFhO0lBQ2JDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsc0JBQXNCO0lBQ3RCQyxXQUFXO0lBQ1hDLFFBQVE7SUFDUkMsT0FBTztRQUFDO0tBQVM7SUFDakJDLFdBQVc7UUFBQztLQUFTO0lBQ3JCQyxZQUFZO0lBQ1pDLFdBQVc7UUFBQztLQUFTO0lBQ3JCQyxlQUFlO1FBQUM7S0FBUztJQUN6QkMsaUJBQWlCO0lBQ2pCQyxnQkFBZ0I7UUFBQztLQUFTO0lBQzFCQyxvQkFBb0I7UUFBQztLQUFTO0lBQzlCQyxhQUFhO0lBQ2JDLFlBQVk7UUFBQztLQUFTO0lBQ3RCQyxnQkFBZ0I7UUFBQztLQUFTO0lBQzFCQyxVQUFVO0lBQ1ZDLFNBQVM7UUFBQztLQUFTO0lBQ25CQyxhQUFhO1FBQUM7S0FBUztJQUN2QkMsbUJBQW1CO0lBQ25CQyxrQkFBa0I7SUFDbEJDLE1BQU07UUFBQztLQUFTLENBQUMseUJBQXlCO0FBQzNDO0FBRUFDLE9BQU9DLE1BQU0sQ0FBQzdCO0FBRWQ4QixPQUFPQyxPQUFPLEdBQUcvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1haWQvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi90eXBlcy9hY3Rpdml0eUZpbHRlclR5cGVzLmpzPzA5OWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXHJcbi8qKlxyXG4gKiBAdHlwZSB7QWN0aXZpdHlGaWx0ZXJUeXBlc31cclxuICogQGlnbm9yZVxyXG4gKi9cclxuY29uc3QgYWN0aXZpdHlGaWx0ZXJUeXBlcyA9IHtcclxuXHRpZDogXCJudW1iZXJcIixcclxuXHR1c2VySWQ6IFwibnVtYmVyXCIsXHJcblx0bWVzc2VuZ2VySWQ6IFwibnVtYmVyXCIsXHJcblx0bWVkaWFJZDogXCJudW1iZXJcIixcclxuXHR0eXBlOiBcInN0cmluZ1wiLCAvLyBBY3Rpdml0eVR5cGUgLT4gU3RyaW5nXHJcblx0aXNGb2xsb3dpbmc6IFwiYm9vbGVhblwiLFxyXG5cdGhhc1JlcGxpZXM6IFwiYm9vbGVhblwiLFxyXG5cdGhhc1JlcGxpZXNPclR5cGVUZXh0OiBcImJvb2xlYW5cIixcclxuXHRjcmVhdGVkQXQ6IFwibnVtYmVyXCIsXHJcblx0aWRfbm90OiBcIm51bWJlclwiLFxyXG5cdGlkX2luOiBbXCJudW1iZXJcIl0sXHJcblx0aWRfbm90X2luOiBbXCJudW1iZXJcIl0sXHJcblx0dXNlcklkX25vdDogXCJudW1iZXJcIixcclxuXHR1c2VySWRfaW46IFtcIm51bWJlclwiXSxcclxuXHR1c2VySWRfbm90X2luOiBbXCJudW1iZXJcIl0sXHJcblx0bWVzc2VuZ2VySWRfbm90OiBcIm51bWJlclwiLFxyXG5cdG1lc3NlbmdlcklkX2luOiBbXCJudW1iZXJcIl0sXHJcblx0bWVzc2VuZ2VySWRfbm90X2luOiBbXCJudW1iZXJcIl0sXHJcblx0bWVkaWFJZF9ub3Q6IFwibnVtYmVyXCIsXHJcblx0bWVkaWFJZF9pbjogW1wibnVtYmVyXCJdLFxyXG5cdG1lZGlhSWRfbm90X2luOiBbXCJudW1iZXJcIl0sXHJcblx0dHlwZV9ub3Q6IFwic3RyaW5nXCIsIC8vIEFjdGl2aXR5VHlwZSAtPiBTdHJpbmdcclxuXHR0eXBlX2luOiBbXCJzdHJpbmdcIl0sIC8vIEFjdGl2aXR5VHlwZSAtPiBTdHJpbmdcclxuXHR0eXBlX25vdF9pbjogW1wic3RyaW5nXCJdLCAvLyBBY3Rpdml0eVR5cGUgLT4gU3RyaW5nXHJcblx0Y3JlYXRlZEF0X2dyZWF0ZXI6IFwibnVtYmVyXCIsXHJcblx0Y3JlYXRlZEF0X2xlc3NlcjogXCJudW1iZXJcIixcclxuXHRzb3J0OiBbXCJzdHJpbmdcIl0gLy8gQWN0aXZpdHlTb3J0IC0+IFN0cmluZ1xyXG59O1xyXG5cclxuT2JqZWN0LmZyZWV6ZShhY3Rpdml0eUZpbHRlclR5cGVzKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gYWN0aXZpdHlGaWx0ZXJUeXBlcztcclxuIl0sIm5hbWVzIjpbImFjdGl2aXR5RmlsdGVyVHlwZXMiLCJpZCIsInVzZXJJZCIsIm1lc3NlbmdlcklkIiwibWVkaWFJZCIsInR5cGUiLCJpc0ZvbGxvd2luZyIsImhhc1JlcGxpZXMiLCJoYXNSZXBsaWVzT3JUeXBlVGV4dCIsImNyZWF0ZWRBdCIsImlkX25vdCIsImlkX2luIiwiaWRfbm90X2luIiwidXNlcklkX25vdCIsInVzZXJJZF9pbiIsInVzZXJJZF9ub3RfaW4iLCJtZXNzZW5nZXJJZF9ub3QiLCJtZXNzZW5nZXJJZF9pbiIsIm1lc3NlbmdlcklkX25vdF9pbiIsIm1lZGlhSWRfbm90IiwibWVkaWFJZF9pbiIsIm1lZGlhSWRfbm90X2luIiwidHlwZV9ub3QiLCJ0eXBlX2luIiwidHlwZV9ub3RfaW4iLCJjcmVhdGVkQXRfZ3JlYXRlciIsImNyZWF0ZWRBdF9sZXNzZXIiLCJzb3J0IiwiT2JqZWN0IiwiZnJlZXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/types/activityFilterTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/types/mediaFilterTypes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/anilist-node/lib/types/mediaFilterTypes.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/* eslint-disable camelcase */ /**\r\n * @type {MediaFilterTypes}\r\n * @ignore\r\n */ \nconst mediaFilterTypes = {\n    id: \"number\",\n    idMal: \"number\",\n    startDate: \"number\",\n    endDate: \"number\",\n    season: \"string\",\n    seasonYear: \"number\",\n    type: \"string\",\n    format: \"string\",\n    status: \"string\",\n    episodes: \"number\",\n    duration: \"number\",\n    chapters: \"number\",\n    volumes: \"number\",\n    isAdult: \"boolean\",\n    genre: \"string\",\n    tag: \"string\",\n    minimumTagRank: \"number\",\n    tagCategory: \"string\",\n    onList: \"boolean\",\n    licensedBy: \"string\",\n    averageScore: \"number\",\n    popularity: \"number\",\n    source: \"string\",\n    countryOfOrigin: \"number\",\n    search: \"string\",\n    id_not: \"number\",\n    id_in: [\n        0\n    ],\n    id_not_in: [\n        0\n    ],\n    idMal_not: \"number\",\n    idMal_in: [\n        0\n    ],\n    idMal_not_in: [\n        0\n    ],\n    startDate_greater: \"number\",\n    startDate_lesser: \"number\",\n    startDate_like: \"string\",\n    endDate_greater: \"number\",\n    endDate_lesser: \"number\",\n    endDate_like: \"string\",\n    format_in: [\n        \"string\"\n    ],\n    format_not: \"string\",\n    format_not_in: [\n        \"string\"\n    ],\n    status_in: [\n        \"string\"\n    ],\n    status_not: \"string\",\n    status_not_in: [\n        \"string\"\n    ],\n    episodes_greater: \"number\",\n    episodes_lesser: \"number\",\n    duration_greater: \"number\",\n    duration_lesser: \"number\",\n    chapters_greater: \"number\",\n    chapters_lesser: \"number\",\n    volumes_greater: \"number\",\n    volumes_lesser: \"number\",\n    genre_in: [\n        \"string\"\n    ],\n    genre_not_in: [\n        \"string\"\n    ],\n    tag_in: [\n        \"string\"\n    ],\n    tag_not_in: [\n        \"string\"\n    ],\n    tagCategory_in: [\n        \"string\"\n    ],\n    tagCategory_not_in: [\n        \"string\"\n    ],\n    licensedBy_in: [\n        \"string\"\n    ],\n    averageScore_not: \"number\",\n    averageScore_greater: \"number\",\n    averageScore_lesser: \"number\",\n    popularity_not: \"number\",\n    popularity_greater: \"number\",\n    popularity_lesser: \"number\",\n    source_in: [\n        \"string\"\n    ],\n    sort: [\n        \"string\"\n    ] // MediaSort -> \"string\"\n};\nObject.freeze(mediaFilterTypes);\nmodule.exports = mediaFilterTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi90eXBlcy9tZWRpYUZpbHRlclR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QixHQUM1Qjs7O0NBR0M7QUFDRCxNQUFNQSxtQkFBbUI7SUFDeEJDLElBQUk7SUFDSkMsT0FBTztJQUNQQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLFVBQVU7SUFDVkMsVUFBVTtJQUNWQyxVQUFVO0lBQ1ZDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLEtBQUs7SUFDTEMsZ0JBQWdCO0lBQ2hCQyxhQUFhO0lBQ2JDLFFBQVE7SUFDUkMsWUFBWTtJQUNaQyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkMsUUFBUTtJQUNSQyxpQkFBaUI7SUFDakJDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxPQUFPO1FBQUM7S0FBRTtJQUNWQyxXQUFXO1FBQUM7S0FBRTtJQUNkQyxXQUFXO0lBQ1hDLFVBQVU7UUFBQztLQUFFO0lBQ2JDLGNBQWM7UUFBQztLQUFFO0lBQ2pCQyxtQkFBbUI7SUFDbkJDLGtCQUFrQjtJQUNsQkMsZ0JBQWdCO0lBQ2hCQyxpQkFBaUI7SUFDakJDLGdCQUFnQjtJQUNoQkMsY0FBYztJQUNkQyxXQUFXO1FBQUM7S0FBUztJQUNyQkMsWUFBWTtJQUNaQyxlQUFlO1FBQUM7S0FBUztJQUN6QkMsV0FBVztRQUFDO0tBQVM7SUFDckJDLFlBQVk7SUFDWkMsZUFBZTtRQUFDO0tBQVM7SUFDekJDLGtCQUFrQjtJQUNsQkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7SUFDbEJDLGlCQUFpQjtJQUNqQkMsa0JBQWtCO0lBQ2xCQyxpQkFBaUI7SUFDakJDLGlCQUFpQjtJQUNqQkMsZ0JBQWdCO0lBQ2hCQyxVQUFVO1FBQUM7S0FBUztJQUNwQkMsY0FBYztRQUFDO0tBQVM7SUFDeEJDLFFBQVE7UUFBQztLQUFTO0lBQ2xCQyxZQUFZO1FBQUM7S0FBUztJQUN0QkMsZ0JBQWdCO1FBQUM7S0FBUztJQUMxQkMsb0JBQW9CO1FBQUM7S0FBUztJQUM5QkMsZUFBZTtRQUFDO0tBQVM7SUFDekJDLGtCQUFrQjtJQUNsQkMsc0JBQXNCO0lBQ3RCQyxxQkFBcUI7SUFDckJDLGdCQUFnQjtJQUNoQkMsb0JBQW9CO0lBQ3BCQyxtQkFBbUI7SUFDbkJDLFdBQVc7UUFBQztLQUFTO0lBQ3JCQyxNQUFNO1FBQUM7S0FBUyxDQUFDLHdCQUF3QjtBQUMxQztBQUVBQyxPQUFPQyxNQUFNLENBQUNwRTtBQUVkcUUsT0FBT0MsT0FBTyxHQUFHdEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYWlkLy4vbm9kZV9tb2R1bGVzL2FuaWxpc3Qtbm9kZS9saWIvdHlwZXMvbWVkaWFGaWx0ZXJUeXBlcy5qcz9mMzNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG4vKipcclxuICogQHR5cGUge01lZGlhRmlsdGVyVHlwZXN9XHJcbiAqIEBpZ25vcmVcclxuICovXHJcbmNvbnN0IG1lZGlhRmlsdGVyVHlwZXMgPSB7XHJcblx0aWQ6IFwibnVtYmVyXCIsXHJcblx0aWRNYWw6IFwibnVtYmVyXCIsXHJcblx0c3RhcnREYXRlOiBcIm51bWJlclwiLCAvLyBGdXp6eURhdGVJbnQgLT4gXCJudW1iZXJcIlxyXG5cdGVuZERhdGU6IFwibnVtYmVyXCIsIC8vIEZ1enp5RGF0ZUludCAtPiBcIm51bWJlclwiXHJcblx0c2Vhc29uOiBcInN0cmluZ1wiLCAvLyBNZWRpYVNlYXNvbiAtPiBcInN0cmluZ1wiXHJcblx0c2Vhc29uWWVhcjogXCJudW1iZXJcIixcclxuXHR0eXBlOiBcInN0cmluZ1wiLCAvLyBNZWRpYVR5cGUgLT4gXCJzdHJpbmdcIlxyXG5cdGZvcm1hdDogXCJzdHJpbmdcIiwgLy8gTWVkaWFGb3JtYXQgLT4gXCJzdHJpbmdcIlxyXG5cdHN0YXR1czogXCJzdHJpbmdcIiwgLy8gTWVkaWFTdGF0dXMgLT4gXCJzdHJpbmdcIlxyXG5cdGVwaXNvZGVzOiBcIm51bWJlclwiLFxyXG5cdGR1cmF0aW9uOiBcIm51bWJlclwiLFxyXG5cdGNoYXB0ZXJzOiBcIm51bWJlclwiLFxyXG5cdHZvbHVtZXM6IFwibnVtYmVyXCIsXHJcblx0aXNBZHVsdDogXCJib29sZWFuXCIsXHJcblx0Z2VucmU6IFwic3RyaW5nXCIsXHJcblx0dGFnOiBcInN0cmluZ1wiLFxyXG5cdG1pbmltdW1UYWdSYW5rOiBcIm51bWJlclwiLFxyXG5cdHRhZ0NhdGVnb3J5OiBcInN0cmluZ1wiLFxyXG5cdG9uTGlzdDogXCJib29sZWFuXCIsXHJcblx0bGljZW5zZWRCeTogXCJzdHJpbmdcIixcclxuXHRhdmVyYWdlU2NvcmU6IFwibnVtYmVyXCIsXHJcblx0cG9wdWxhcml0eTogXCJudW1iZXJcIixcclxuXHRzb3VyY2U6IFwic3RyaW5nXCIsIC8vIE1lZGlhRm9ybWF0IC0+IFwic3RyaW5nXCJcclxuXHRjb3VudHJ5T2ZPcmlnaW46IFwibnVtYmVyXCIsIC8vIENvdW50cnlDb2RlIC0+IFwibnVtYmVyXCJcclxuXHRzZWFyY2g6IFwic3RyaW5nXCIsXHJcblx0aWRfbm90OiBcIm51bWJlclwiLFxyXG5cdGlkX2luOiBbMF0sIC8vIFswXSBmb3IgTnVtYmVyIGFycmF5LlxyXG5cdGlkX25vdF9pbjogWzBdLCAvLyBbMF0gZm9yIE51bWJlciBhcnJheS5cclxuXHRpZE1hbF9ub3Q6IFwibnVtYmVyXCIsXHJcblx0aWRNYWxfaW46IFswXSwgLy8gWzBdIGZvciBOdW1iZXIgYXJyYXkuXHJcblx0aWRNYWxfbm90X2luOiBbMF0sIC8vIFswXSBmb3IgTnVtYmVyIGFycmF5LlxyXG5cdHN0YXJ0RGF0ZV9ncmVhdGVyOiBcIm51bWJlclwiLCAvLyBGdXp6eURhdGVJbnQgLT4gXCJudW1iZXJcIlxyXG5cdHN0YXJ0RGF0ZV9sZXNzZXI6IFwibnVtYmVyXCIsIC8vIEZ1enp5RGF0ZUludCAtPiBcIm51bWJlclwiXHJcblx0c3RhcnREYXRlX2xpa2U6IFwic3RyaW5nXCIsXHJcblx0ZW5kRGF0ZV9ncmVhdGVyOiBcIm51bWJlclwiLCAvLyBGdXp6eURhdGVJbnQgLT4gXCJudW1iZXJcIlxyXG5cdGVuZERhdGVfbGVzc2VyOiBcIm51bWJlclwiLCAvLyBGdXp6eURhdGVJbnQgLT4gXCJudW1iZXJcIlxyXG5cdGVuZERhdGVfbGlrZTogXCJzdHJpbmdcIixcclxuXHRmb3JtYXRfaW46IFtcInN0cmluZ1wiXSwgLy8gTWVkaWFGb3JtYXQgLT4gXCJzdHJpbmdcIlxyXG5cdGZvcm1hdF9ub3Q6IFwic3RyaW5nXCIsIC8vIE1lZGlhRm9ybWF0IC0+IFwic3RyaW5nXCJcclxuXHRmb3JtYXRfbm90X2luOiBbXCJzdHJpbmdcIl0sIC8vIE1lZGlhRm9ybWF0IC0+IFwic3RyaW5nXCJcclxuXHRzdGF0dXNfaW46IFtcInN0cmluZ1wiXSwgLy8gTWVkaWFTdGF0dXMgLT4gXCJzdHJpbmdcIlxyXG5cdHN0YXR1c19ub3Q6IFwic3RyaW5nXCIsIC8vIE1lZGlhU3RhdHVzIC0+IFwic3RyaW5nXCJcclxuXHRzdGF0dXNfbm90X2luOiBbXCJzdHJpbmdcIl0sIC8vIE1lZGlhU3RhdHVzIC0+IFwic3RyaW5nXCJcclxuXHRlcGlzb2Rlc19ncmVhdGVyOiBcIm51bWJlclwiLFxyXG5cdGVwaXNvZGVzX2xlc3NlcjogXCJudW1iZXJcIixcclxuXHRkdXJhdGlvbl9ncmVhdGVyOiBcIm51bWJlclwiLFxyXG5cdGR1cmF0aW9uX2xlc3NlcjogXCJudW1iZXJcIixcclxuXHRjaGFwdGVyc19ncmVhdGVyOiBcIm51bWJlclwiLFxyXG5cdGNoYXB0ZXJzX2xlc3NlcjogXCJudW1iZXJcIixcclxuXHR2b2x1bWVzX2dyZWF0ZXI6IFwibnVtYmVyXCIsXHJcblx0dm9sdW1lc19sZXNzZXI6IFwibnVtYmVyXCIsXHJcblx0Z2VucmVfaW46IFtcInN0cmluZ1wiXSxcclxuXHRnZW5yZV9ub3RfaW46IFtcInN0cmluZ1wiXSxcclxuXHR0YWdfaW46IFtcInN0cmluZ1wiXSxcclxuXHR0YWdfbm90X2luOiBbXCJzdHJpbmdcIl0sXHJcblx0dGFnQ2F0ZWdvcnlfaW46IFtcInN0cmluZ1wiXSxcclxuXHR0YWdDYXRlZ29yeV9ub3RfaW46IFtcInN0cmluZ1wiXSxcclxuXHRsaWNlbnNlZEJ5X2luOiBbXCJzdHJpbmdcIl0sXHJcblx0YXZlcmFnZVNjb3JlX25vdDogXCJudW1iZXJcIixcclxuXHRhdmVyYWdlU2NvcmVfZ3JlYXRlcjogXCJudW1iZXJcIixcclxuXHRhdmVyYWdlU2NvcmVfbGVzc2VyOiBcIm51bWJlclwiLFxyXG5cdHBvcHVsYXJpdHlfbm90OiBcIm51bWJlclwiLFxyXG5cdHBvcHVsYXJpdHlfZ3JlYXRlcjogXCJudW1iZXJcIixcclxuXHRwb3B1bGFyaXR5X2xlc3NlcjogXCJudW1iZXJcIixcclxuXHRzb3VyY2VfaW46IFtcInN0cmluZ1wiXSwgLy8gTWVkaWFTb3VyY2UgLT4gXCJzdHJpbmdcIlxyXG5cdHNvcnQ6IFtcInN0cmluZ1wiXSAvLyBNZWRpYVNvcnQgLT4gXCJzdHJpbmdcIlxyXG59O1xyXG5cclxuT2JqZWN0LmZyZWV6ZShtZWRpYUZpbHRlclR5cGVzKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbWVkaWFGaWx0ZXJUeXBlcztcclxuIl0sIm5hbWVzIjpbIm1lZGlhRmlsdGVyVHlwZXMiLCJpZCIsImlkTWFsIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInNlYXNvbiIsInNlYXNvblllYXIiLCJ0eXBlIiwiZm9ybWF0Iiwic3RhdHVzIiwiZXBpc29kZXMiLCJkdXJhdGlvbiIsImNoYXB0ZXJzIiwidm9sdW1lcyIsImlzQWR1bHQiLCJnZW5yZSIsInRhZyIsIm1pbmltdW1UYWdSYW5rIiwidGFnQ2F0ZWdvcnkiLCJvbkxpc3QiLCJsaWNlbnNlZEJ5IiwiYXZlcmFnZVNjb3JlIiwicG9wdWxhcml0eSIsInNvdXJjZSIsImNvdW50cnlPZk9yaWdpbiIsInNlYXJjaCIsImlkX25vdCIsImlkX2luIiwiaWRfbm90X2luIiwiaWRNYWxfbm90IiwiaWRNYWxfaW4iLCJpZE1hbF9ub3RfaW4iLCJzdGFydERhdGVfZ3JlYXRlciIsInN0YXJ0RGF0ZV9sZXNzZXIiLCJzdGFydERhdGVfbGlrZSIsImVuZERhdGVfZ3JlYXRlciIsImVuZERhdGVfbGVzc2VyIiwiZW5kRGF0ZV9saWtlIiwiZm9ybWF0X2luIiwiZm9ybWF0X25vdCIsImZvcm1hdF9ub3RfaW4iLCJzdGF0dXNfaW4iLCJzdGF0dXNfbm90Iiwic3RhdHVzX25vdF9pbiIsImVwaXNvZGVzX2dyZWF0ZXIiLCJlcGlzb2Rlc19sZXNzZXIiLCJkdXJhdGlvbl9ncmVhdGVyIiwiZHVyYXRpb25fbGVzc2VyIiwiY2hhcHRlcnNfZ3JlYXRlciIsImNoYXB0ZXJzX2xlc3NlciIsInZvbHVtZXNfZ3JlYXRlciIsInZvbHVtZXNfbGVzc2VyIiwiZ2VucmVfaW4iLCJnZW5yZV9ub3RfaW4iLCJ0YWdfaW4iLCJ0YWdfbm90X2luIiwidGFnQ2F0ZWdvcnlfaW4iLCJ0YWdDYXRlZ29yeV9ub3RfaW4iLCJsaWNlbnNlZEJ5X2luIiwiYXZlcmFnZVNjb3JlX25vdCIsImF2ZXJhZ2VTY29yZV9ncmVhdGVyIiwiYXZlcmFnZVNjb3JlX2xlc3NlciIsInBvcHVsYXJpdHlfbm90IiwicG9wdWxhcml0eV9ncmVhdGVyIiwicG9wdWxhcml0eV9sZXNzZXIiLCJzb3VyY2VfaW4iLCJzb3J0IiwiT2JqZWN0IiwiZnJlZXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/types/mediaFilterTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/user.js":
/*!***********************************************!*\
  !*** ./node_modules/anilist-node/lib/user.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { UserProfileQuery, UserStatsQuery, UserUpdateQuery, ListActivityQuery, TextActivityQuery, MessageActivityQuery } = __webpack_require__(/*! ./consts */ \"(rsc)/./node_modules/anilist-node/lib/consts.js\");\n/**\r\n * Access AniList's user data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */ class User {\n    /**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilites } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */ constructor(utilities){\n        this.util = utilities;\n    }\n    /**\r\n\t * Fetch a user's AniList basic profile.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserProfile }\r\n\t * @since 1.0.0\r\n\t */ profile(user) {\n        let queryVars = this.util.generateQueryHeaders(\"User\", user);\n        return this.util.send(`${queryVars[1]}${UserProfileQuery}}}`, queryVars[0]);\n    }\n    /**\r\n\t * Fetch a user's AniList stats.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserStats }\r\n\t * @since 1.3.0\r\n\t */ stats(user) {\n        let queryVars = this.util.generateQueryHeaders(\"User\", user);\n        return this.util.send(`${queryVars[1]}${UserStatsQuery}}}`, queryVars[0]);\n    }\n    /**\r\n\t * Fetch a user's AniList profile, basic and stats.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { Object } Returns all keys within {@link UserProfile} and {@link UserStats}. UserStats are found under the statistics key.\r\n\t * @since 1.0.0\r\n\t */ all(user) {\n        let queryVars = this.util.generateQueryHeaders(\"User\", user);\n        return this.util.send(`${queryVars[1]}${UserProfileQuery} ${UserStatsQuery}}}`, queryVars[0]);\n    }\n    /**\r\n\t * Fetch recent activity from a user.\r\n\t * @param {Number} user - Required. Needs to be the user's AniList ID.\r\n\t * @returns { Object[] } Returns the 25 most recent activities of the user. Contains any number of\r\n\t * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifyable by the type key.\r\n\t *\r\n\t * @since 1.6.0\r\n\t */ getRecentActivity(user) {\n        if (typeof user !== \"number\") {\n            throw new Error(\"Term does not match the required types!\");\n        }\n        return this.util.send(`query ($page: Int, $perPage: Int, $user: Int) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            activities(userId: $user, sort:ID_DESC) {\r\n                ... on ListActivity { ${ListActivityQuery} }\r\n                ... on TextActivity { ${TextActivityQuery} }\r\n                ... on MessageActivity { ${MessageActivityQuery} }\r\n            } } }`, {\n            user: user,\n            page: 1,\n            perPage: 25\n        });\n    }\n    /**\r\n\t * Fetch profile information on the currently authorized user.\r\n\t * @returns { UserProfile }\r\n\t *\r\n\t * @since 1.8.0\r\n\t */ getAuthorized() {\n        if (!this.util.key) {\n            throw new Error(\"There is no current authorized user!\");\n        }\n        return this.util.send(`query{Viewer{${UserProfileQuery}}}`, {});\n    }\n    /**\r\n\t * [Requires Login] Update user settings\r\n\t * @param {UserOptionsInput} options\r\n\t * @returns {UserOptions}\r\n\t *\r\n\t * @since 1.10.0\r\n\t */ async update(options) {\n        if (!options || Object.keys(options).length === 0) {\n            throw new Error(\"Options were not provided for updating user!\");\n        }\n        const data = await this.util.send(UserUpdateQuery, options);\n        return data.updateUser;\n    }\n    /**\r\n\t * [Requires Login] Follow/Unfollow a user\r\n\t * @param {Number} userID - The user ID of the account to follow\r\n\t * @returns {Boolean} True if following, false otherwise.\r\n\t *\r\n\t * @since 1.12.0\r\n\t */ async follow(userID) {\n        if (typeof userID !== \"number\") {\n            throw new Error(\"userID is not a number type.\");\n        }\n        return this.util.send(`mutation ($userID: Int) { ToggleFollow(userId: $userID) { isFollowing } }`, {\n            userID: userID\n        }).then((data)=>{\n            if (Array.isArray(data)) {\n                return data;\n            }\n            return data.ToggleFollow.isFollowing;\n        });\n    }\n}\nmodule.exports = User;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi91c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQ0xBLGdCQUFnQixFQUNoQkMsY0FBYyxFQUNkQyxlQUFlLEVBQ2ZDLGlCQUFpQixFQUNqQkMsaUJBQWlCLEVBQ2pCQyxvQkFBb0IsRUFDcEIsR0FBR0MsbUJBQU9BLENBQUMsaUVBQVU7QUFFdEI7Ozs7Q0FJQyxHQUNELE1BQU1DO0lBQ0w7Ozs7O0VBS0MsR0FDREMsWUFBWUMsU0FBUyxDQUFFO1FBQ3RCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRDtJQUNiO0lBRUE7Ozs7O0VBS0MsR0FDREUsUUFBUUMsSUFBSSxFQUFFO1FBQ2IsSUFBSUMsWUFBWSxJQUFJLENBQUNILElBQUksQ0FBQ0ksb0JBQW9CLENBQUMsUUFBUUY7UUFFdkQsT0FBTyxJQUFJLENBQUNGLElBQUksQ0FBQ0ssSUFBSSxDQUFDLENBQUMsRUFBRUYsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFYixpQkFBaUIsRUFBRSxDQUFDLEVBQUVhLFNBQVMsQ0FBQyxFQUFFO0lBQzNFO0lBRUE7Ozs7O0VBS0MsR0FDREcsTUFBTUosSUFBSSxFQUFFO1FBQ1gsSUFBSUMsWUFBWSxJQUFJLENBQUNILElBQUksQ0FBQ0ksb0JBQW9CLENBQUMsUUFBUUY7UUFDdkQsT0FBTyxJQUFJLENBQUNGLElBQUksQ0FBQ0ssSUFBSSxDQUFDLENBQUMsRUFBRUYsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFWixlQUFlLEVBQUUsQ0FBQyxFQUFFWSxTQUFTLENBQUMsRUFBRTtJQUN6RTtJQUVBOzs7OztFQUtDLEdBQ0RJLElBQUlMLElBQUksRUFBRTtRQUNULElBQUlDLFlBQVksSUFBSSxDQUFDSCxJQUFJLENBQUNJLG9CQUFvQixDQUFDLFFBQVFGO1FBQ3ZELE9BQU8sSUFBSSxDQUFDRixJQUFJLENBQUNLLElBQUksQ0FBQyxDQUFDLEVBQUVGLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRWIsaUJBQWlCLENBQUMsRUFBRUMsZUFBZSxFQUFFLENBQUMsRUFBRVksU0FBUyxDQUFDLEVBQUU7SUFDN0Y7SUFFQTs7Ozs7OztFQU9DLEdBQ0RLLGtCQUFrQk4sSUFBSSxFQUFFO1FBQ3ZCLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzdCLE1BQU0sSUFBSU8sTUFBTTtRQUNqQjtRQUVBLE9BQU8sSUFBSSxDQUFDVCxJQUFJLENBQUNLLElBQUksQ0FDcEIsQ0FBQzs7O3NDQUdrQyxFQUFFWixrQkFBa0I7c0NBQ3BCLEVBQUVDLGtCQUFrQjt5Q0FDakIsRUFBRUMscUJBQXFCO2lCQUMvQyxDQUFDLEVBQ2Y7WUFBRU8sTUFBTUE7WUFBTVEsTUFBTTtZQUFHQyxTQUFTO1FBQUc7SUFFckM7SUFFQTs7Ozs7RUFLQyxHQUNEQyxnQkFBZ0I7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDWixJQUFJLENBQUNhLEdBQUcsRUFBRTtZQUNuQixNQUFNLElBQUlKLE1BQU07UUFDakI7UUFFQSxPQUFPLElBQUksQ0FBQ1QsSUFBSSxDQUFDSyxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUVmLGlCQUFpQixFQUFFLENBQUMsRUFBRSxDQUFDO0lBQzlEO0lBRUE7Ozs7OztFQU1DLEdBQ0QsTUFBTXdCLE9BQU9DLE9BQU8sRUFBRTtRQUNyQixJQUFJLENBQUNBLFdBQVdDLE9BQU9DLElBQUksQ0FBQ0YsU0FBU0csTUFBTSxLQUFLLEdBQUc7WUFDbEQsTUFBTSxJQUFJVCxNQUFNO1FBQ2pCO1FBRUEsTUFBTVUsT0FBTyxNQUFNLElBQUksQ0FBQ25CLElBQUksQ0FBQ0ssSUFBSSxDQUFDYixpQkFBaUJ1QjtRQUNuRCxPQUFPSSxLQUFLQyxVQUFVO0lBQ3ZCO0lBRUE7Ozs7OztFQU1DLEdBQ0QsTUFBTUMsT0FBT0MsTUFBTSxFQUFFO1FBQ3BCLElBQUksT0FBT0EsV0FBVyxVQUFVO1lBQy9CLE1BQU0sSUFBSWIsTUFBTTtRQUNqQjtRQUVBLE9BQU8sSUFBSSxDQUFDVCxJQUFJLENBQ2RLLElBQUksQ0FBQyxDQUFDLHlFQUF5RSxDQUFDLEVBQUU7WUFDbEZpQixRQUFRQTtRQUNULEdBQ0NDLElBQUksQ0FBQyxDQUFDSjtZQUNOLElBQUlLLE1BQU1DLE9BQU8sQ0FBQ04sT0FBTztnQkFDeEIsT0FBT0E7WUFDUjtZQUNBLE9BQU9BLEtBQUtPLFlBQVksQ0FBQ0MsV0FBVztRQUNyQztJQUNGO0FBQ0Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYWlkLy4vbm9kZV9tb2R1bGVzL2FuaWxpc3Qtbm9kZS9saWIvdXNlci5qcz8wZWU5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtcclxuXHRVc2VyUHJvZmlsZVF1ZXJ5LFxyXG5cdFVzZXJTdGF0c1F1ZXJ5LFxyXG5cdFVzZXJVcGRhdGVRdWVyeSxcclxuXHRMaXN0QWN0aXZpdHlRdWVyeSxcclxuXHRUZXh0QWN0aXZpdHlRdWVyeSxcclxuXHRNZXNzYWdlQWN0aXZpdHlRdWVyeVxyXG59ID0gcmVxdWlyZShcIi4vY29uc3RzXCIpO1xyXG5cclxuLyoqXHJcbiAqIEFjY2VzcyBBbmlMaXN0J3MgdXNlciBkYXRhLlxyXG4gKiBAc2luY2UgMS4wLjBcclxuICogQG1lbWJlcm9mIEFuaUxpc3RcclxuICovXHJcbmNsYXNzIFVzZXIge1xyXG5cdC8qKlxyXG5cdCAqIEBkZXNjcmlwdGlvbiBUaGlzIGNvbnN0cnVjdG9yIGlzIG1lYW50IGZvciBpbnRlcm5hbCB1c2UgYW5kIGlzIGFwYXJ0IG9mIGluaXRpYWxpemluZy4gWW91IGNhbm5vdCBhY2Nlc3MgdGhpc1xyXG5cdCAqIHRocm91Z2ggdGhlIEFuaUxpc3QgY2xhc3MgYW5kIGFyZSBub3QgZXhwZWN0IHRvLlxyXG5cdCAqIEBwYXJhbSB7IFV0aWxpdGVzIH0gdXRpbGl0aWVzIC0gVGhlIEFuaUxpc3QgVXRpbGl0aWVzIGNsYXNzLlxyXG5cdCAqIEBoaWRlY29uc3RydWN0b3JcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih1dGlsaXRpZXMpIHtcclxuXHRcdHRoaXMudXRpbCA9IHV0aWxpdGllcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZldGNoIGEgdXNlcidzIEFuaUxpc3QgYmFzaWMgcHJvZmlsZS5cclxuXHQgKiBAcGFyYW0geyBOdW1iZXIgfCBTdHJpbmcgfSB1c2VyIC0gUmVxdWlyZWQuIENhbiBlaXRoZXIgYmUgdGhlIHVzZXJuYW1lIG9yIHRoZSBBbmlMaXN0IElELlxyXG5cdCAqIEByZXR1cm5zIHsgVXNlclByb2ZpbGUgfVxyXG5cdCAqIEBzaW5jZSAxLjAuMFxyXG5cdCAqL1xyXG5cdHByb2ZpbGUodXNlcikge1xyXG5cdFx0bGV0IHF1ZXJ5VmFycyA9IHRoaXMudXRpbC5nZW5lcmF0ZVF1ZXJ5SGVhZGVycyhcIlVzZXJcIiwgdXNlcik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudXRpbC5zZW5kKGAke3F1ZXJ5VmFyc1sxXX0ke1VzZXJQcm9maWxlUXVlcnl9fX1gLCBxdWVyeVZhcnNbMF0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRmV0Y2ggYSB1c2VyJ3MgQW5pTGlzdCBzdGF0cy5cclxuXHQgKiBAcGFyYW0geyBOdW1iZXIgfCBTdHJpbmcgfSB1c2VyIC0gUmVxdWlyZWQuIENhbiBlaXRoZXIgYmUgdGhlIHVzZXJuYW1lIG9yIHRoZSBBbmlMaXN0IElELlxyXG5cdCAqIEByZXR1cm5zIHsgVXNlclN0YXRzIH1cclxuXHQgKiBAc2luY2UgMS4zLjBcclxuXHQgKi9cclxuXHRzdGF0cyh1c2VyKSB7XHJcblx0XHRsZXQgcXVlcnlWYXJzID0gdGhpcy51dGlsLmdlbmVyYXRlUXVlcnlIZWFkZXJzKFwiVXNlclwiLCB1c2VyKTtcclxuXHRcdHJldHVybiB0aGlzLnV0aWwuc2VuZChgJHtxdWVyeVZhcnNbMV19JHtVc2VyU3RhdHNRdWVyeX19fWAsIHF1ZXJ5VmFyc1swXSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGZXRjaCBhIHVzZXIncyBBbmlMaXN0IHByb2ZpbGUsIGJhc2ljIGFuZCBzdGF0cy5cclxuXHQgKiBAcGFyYW0geyBOdW1iZXIgfCBTdHJpbmcgfSB1c2VyIC0gUmVxdWlyZWQuIENhbiBlaXRoZXIgYmUgdGhlIHVzZXJuYW1lIG9yIHRoZSBBbmlMaXN0IElELlxyXG5cdCAqIEByZXR1cm5zIHsgT2JqZWN0IH0gUmV0dXJucyBhbGwga2V5cyB3aXRoaW4ge0BsaW5rIFVzZXJQcm9maWxlfSBhbmQge0BsaW5rIFVzZXJTdGF0c30uIFVzZXJTdGF0cyBhcmUgZm91bmQgdW5kZXIgdGhlIHN0YXRpc3RpY3Mga2V5LlxyXG5cdCAqIEBzaW5jZSAxLjAuMFxyXG5cdCAqL1xyXG5cdGFsbCh1c2VyKSB7XHJcblx0XHRsZXQgcXVlcnlWYXJzID0gdGhpcy51dGlsLmdlbmVyYXRlUXVlcnlIZWFkZXJzKFwiVXNlclwiLCB1c2VyKTtcclxuXHRcdHJldHVybiB0aGlzLnV0aWwuc2VuZChgJHtxdWVyeVZhcnNbMV19JHtVc2VyUHJvZmlsZVF1ZXJ5fSAke1VzZXJTdGF0c1F1ZXJ5fX19YCwgcXVlcnlWYXJzWzBdKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZldGNoIHJlY2VudCBhY3Rpdml0eSBmcm9tIGEgdXNlci5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gdXNlciAtIFJlcXVpcmVkLiBOZWVkcyB0byBiZSB0aGUgdXNlcidzIEFuaUxpc3QgSUQuXHJcblx0ICogQHJldHVybnMgeyBPYmplY3RbXSB9IFJldHVybnMgdGhlIDI1IG1vc3QgcmVjZW50IGFjdGl2aXRpZXMgb2YgdGhlIHVzZXIuIENvbnRhaW5zIGFueSBudW1iZXIgb2ZcclxuXHQgKiB7QGxpbmsgTGlzdEFjdGl2aXR5fSwge0BsaW5rIFRleHRBY3Rpdml0eX0sIHtAbGluayBNZXNzYWdlQWN0aXZpdHl9LiBBbGwgb2Ygd2hpY2ggYXJlIGlkZW50aWZ5YWJsZSBieSB0aGUgdHlwZSBrZXkuXHJcblx0ICpcclxuXHQgKiBAc2luY2UgMS42LjBcclxuXHQgKi9cclxuXHRnZXRSZWNlbnRBY3Rpdml0eSh1c2VyKSB7XHJcblx0XHRpZiAodHlwZW9mIHVzZXIgIT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVGVybSBkb2VzIG5vdCBtYXRjaCB0aGUgcmVxdWlyZWQgdHlwZXMhXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnV0aWwuc2VuZChcclxuXHRcdFx0YHF1ZXJ5ICgkcGFnZTogSW50LCAkcGVyUGFnZTogSW50LCAkdXNlcjogSW50KSB7XHJcbiAgICAgICAgICAgIFBhZ2UgKHBhZ2U6ICRwYWdlLCBwZXJQYWdlOiAkcGVyUGFnZSkgeyBwYWdlSW5mbyB7IHRvdGFsIGN1cnJlbnRQYWdlIGxhc3RQYWdlIGhhc05leHRQYWdlIHBlclBhZ2UgfSBcclxuICAgICAgICAgICAgYWN0aXZpdGllcyh1c2VySWQ6ICR1c2VyLCBzb3J0OklEX0RFU0MpIHtcclxuICAgICAgICAgICAgICAgIC4uLiBvbiBMaXN0QWN0aXZpdHkgeyAke0xpc3RBY3Rpdml0eVF1ZXJ5fSB9XHJcbiAgICAgICAgICAgICAgICAuLi4gb24gVGV4dEFjdGl2aXR5IHsgJHtUZXh0QWN0aXZpdHlRdWVyeX0gfVxyXG4gICAgICAgICAgICAgICAgLi4uIG9uIE1lc3NhZ2VBY3Rpdml0eSB7ICR7TWVzc2FnZUFjdGl2aXR5UXVlcnl9IH1cclxuICAgICAgICAgICAgfSB9IH1gLFxyXG5cdFx0XHR7IHVzZXI6IHVzZXIsIHBhZ2U6IDEsIHBlclBhZ2U6IDI1IH1cclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGZXRjaCBwcm9maWxlIGluZm9ybWF0aW9uIG9uIHRoZSBjdXJyZW50bHkgYXV0aG9yaXplZCB1c2VyLlxyXG5cdCAqIEByZXR1cm5zIHsgVXNlclByb2ZpbGUgfVxyXG5cdCAqXHJcblx0ICogQHNpbmNlIDEuOC4wXHJcblx0ICovXHJcblx0Z2V0QXV0aG9yaXplZCgpIHtcclxuXHRcdGlmICghdGhpcy51dGlsLmtleSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBjdXJyZW50IGF1dGhvcml6ZWQgdXNlciFcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudXRpbC5zZW5kKGBxdWVyeXtWaWV3ZXJ7JHtVc2VyUHJvZmlsZVF1ZXJ5fX19YCwge30pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogW1JlcXVpcmVzIExvZ2luXSBVcGRhdGUgdXNlciBzZXR0aW5nc1xyXG5cdCAqIEBwYXJhbSB7VXNlck9wdGlvbnNJbnB1dH0gb3B0aW9uc1xyXG5cdCAqIEByZXR1cm5zIHtVc2VyT3B0aW9uc31cclxuXHQgKlxyXG5cdCAqIEBzaW5jZSAxLjEwLjBcclxuXHQgKi9cclxuXHRhc3luYyB1cGRhdGUob3B0aW9ucykge1xyXG5cdFx0aWYgKCFvcHRpb25zIHx8IE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJPcHRpb25zIHdlcmUgbm90IHByb3ZpZGVkIGZvciB1cGRhdGluZyB1c2VyIVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgdGhpcy51dGlsLnNlbmQoVXNlclVwZGF0ZVF1ZXJ5LCBvcHRpb25zKTtcclxuXHRcdHJldHVybiBkYXRhLnVwZGF0ZVVzZXI7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBbUmVxdWlyZXMgTG9naW5dIEZvbGxvdy9VbmZvbGxvdyBhIHVzZXJcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gdXNlcklEIC0gVGhlIHVzZXIgSUQgb2YgdGhlIGFjY291bnQgdG8gZm9sbG93XHJcblx0ICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgZm9sbG93aW5nLCBmYWxzZSBvdGhlcndpc2UuXHJcblx0ICpcclxuXHQgKiBAc2luY2UgMS4xMi4wXHJcblx0ICovXHJcblx0YXN5bmMgZm9sbG93KHVzZXJJRCkge1xyXG5cdFx0aWYgKHR5cGVvZiB1c2VySUQgIT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwidXNlcklEIGlzIG5vdCBhIG51bWJlciB0eXBlLlwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy51dGlsXHJcblx0XHRcdC5zZW5kKGBtdXRhdGlvbiAoJHVzZXJJRDogSW50KSB7IFRvZ2dsZUZvbGxvdyh1c2VySWQ6ICR1c2VySUQpIHsgaXNGb2xsb3dpbmcgfSB9YCwge1xyXG5cdFx0XHRcdHVzZXJJRDogdXNlcklEXHJcblx0XHRcdH0pXHJcblx0XHRcdC50aGVuKChkYXRhKSA9PiB7XHJcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZGF0YS5Ub2dnbGVGb2xsb3cuaXNGb2xsb3dpbmc7XHJcblx0XHRcdH0pO1xyXG5cdH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBVc2VyO1xyXG4iXSwibmFtZXMiOlsiVXNlclByb2ZpbGVRdWVyeSIsIlVzZXJTdGF0c1F1ZXJ5IiwiVXNlclVwZGF0ZVF1ZXJ5IiwiTGlzdEFjdGl2aXR5UXVlcnkiLCJUZXh0QWN0aXZpdHlRdWVyeSIsIk1lc3NhZ2VBY3Rpdml0eVF1ZXJ5IiwicmVxdWlyZSIsIlVzZXIiLCJjb25zdHJ1Y3RvciIsInV0aWxpdGllcyIsInV0aWwiLCJwcm9maWxlIiwidXNlciIsInF1ZXJ5VmFycyIsImdlbmVyYXRlUXVlcnlIZWFkZXJzIiwic2VuZCIsInN0YXRzIiwiYWxsIiwiZ2V0UmVjZW50QWN0aXZpdHkiLCJFcnJvciIsInBhZ2UiLCJwZXJQYWdlIiwiZ2V0QXV0aG9yaXplZCIsImtleSIsInVwZGF0ZSIsIm9wdGlvbnMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZGF0YSIsInVwZGF0ZVVzZXIiLCJmb2xsb3ciLCJ1c2VySUQiLCJ0aGVuIiwiQXJyYXkiLCJpc0FycmF5IiwiVG9nZ2xlRm9sbG93IiwiaXNGb2xsb3dpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/user.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/utilities.js":
/*!****************************************************!*\
  !*** ./node_modules/anilist-node/lib/utilities.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fetcher = (__webpack_require__(/*! ./fetcher */ \"(rsc)/./node_modules/anilist-node/lib/fetcher.js\").send);\n/**\r\n * @description A private class to take care of common methods in the package\r\n * @private\r\n * @since 1.5.0\r\n */ class Utilities {\n    /**\r\n\t * @constructor\r\n\t * @param {String} [accessKey] - The AniList API token.\r\n\t * @param {Object} [options] - Optional options used while getting info from AniList\r\n\t */ constructor(accessKey, options){\n        this.key = accessKey;\n        this.options = options;\n    }\n    /**\r\n\t * Generate the appropriate query header for the query.\r\n\t *\r\n\t * @param { String } type - The query type of the header. (ie: User or Character)\r\n\t * @param { Number|String } id - The search term for the query.\r\n\t * @param { String } addItm - An additional item to add to the search variables.\r\n\t * @returns { Object[] } Returns an array. Index 0 is the search variables and Index 1\r\n\t *      is the query header string.\r\n\t * @since 1.5.0\r\n\t */ generateQueryHeaders(type, item, addItm) {\n        // A search term is needed. Throw an error.\n        if (!item) {\n            throw new Error(\"A term is not provided!\");\n        }\n        if (addItm && typeof addItm !== \"string\") {\n            throw new Error(\"The additional item in the query must be a string!\");\n        }\n        switch(typeof item){\n            case \"number\":\n                switch(type){\n                    case \"MediaListCollection\":\n                        return [\n                            {\n                                id: item,\n                                type: addItm\n                            },\n                            \"query ($id: Int, $type: MediaType) { MediaListCollection(userId: $id, type: $type) {\"\n                        ];\n                    case \"User\":\n                    case \"Staff\":\n                    case \"Character\":\n                    case \"Studio\":\n                    case \"Activity\":\n                    case \"Thread\":\n                        return [\n                            {\n                                id: item\n                            },\n                            `query ($id: Int) { ${type} (id: $id) { `\n                        ];\n                    default:\n                        throw new Error(\"This type doesn't have a query assigned to it!\");\n                }\n            case \"string\":\n                switch(type){\n                    case \"MediaListCollection\":\n                        return [\n                            {\n                                name: item,\n                                type: addItm\n                            },\n                            \"query ($name: String, $type: MediaType) { MediaListCollection(userName: $name, type: $type) {\"\n                        ];\n                    case \"User\":\n                        return [\n                            {\n                                name: item\n                            },\n                            \"query ($name: String) { User (name: $name) { \"\n                        ];\n                    // Both staff and character need the same query header.\n                    case \"Staff\":\n                    case \"Character\":\n                    case \"Studio\":\n                        return [\n                            {\n                                search: item\n                            },\n                            `query ($search: String) { ${type} (search: $search) { `\n                        ];\n                    default:\n                        throw new Error(\"This type doesn't have a query assigned to it!\");\n                }\n            default:\n                throw new Error(\"Term does not match the required types!\");\n        }\n    }\n}\n/**\r\n * Send a call to the AniList API with a query and variables.\r\n * @param { String } query - The query to send to the AniList API\r\n * @param { Object } variables - Any variables required such as a username or ID\r\n * @returns { Object } Returns a customized object containing all of the data fetched.\r\n * @since 1.0.0\r\n */ Utilities.prototype.send = fetcher;\nmodule.exports = Utilities;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi91dGlsaXRpZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFVBQVVDLCtGQUF5QjtBQUV6Qzs7OztDQUlDLEdBQ0QsTUFBTUU7SUFDTDs7OztFQUlDLEdBQ0RDLFlBQVlDLFNBQVMsRUFBRUMsT0FBTyxDQUFFO1FBQy9CLElBQUksQ0FBQ0MsR0FBRyxHQUFHRjtRQUNYLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNoQjtJQUVBOzs7Ozs7Ozs7RUFTQyxHQUNERSxxQkFBcUJDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUU7UUFDeEMsMkNBQTJDO1FBQzNDLElBQUksQ0FBQ0QsTUFBTTtZQUNWLE1BQU0sSUFBSUUsTUFBTTtRQUNqQjtRQUNBLElBQUlELFVBQVUsT0FBT0EsV0FBVyxVQUFVO1lBQ3pDLE1BQU0sSUFBSUMsTUFBTTtRQUNqQjtRQUVBLE9BQVEsT0FBT0Y7WUFDZCxLQUFLO2dCQUNKLE9BQVFEO29CQUNQLEtBQUs7d0JBQ0osT0FBTzs0QkFDTjtnQ0FBRUksSUFBSUg7Z0NBQU1ELE1BQU1FOzRCQUFPOzRCQUN6Qjt5QkFDQTtvQkFDRixLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSztvQkFDTCxLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSzt3QkFDSixPQUFPOzRCQUFDO2dDQUFFRSxJQUFJSDs0QkFBSzs0QkFBRyxDQUFDLG1CQUFtQixFQUFFRCxLQUFLLGFBQWEsQ0FBQzt5QkFBQztvQkFDakU7d0JBQ0MsTUFBTSxJQUFJRyxNQUFNO2dCQUNsQjtZQUNELEtBQUs7Z0JBQ0osT0FBUUg7b0JBQ1AsS0FBSzt3QkFDSixPQUFPOzRCQUNOO2dDQUFFSyxNQUFNSjtnQ0FBTUQsTUFBTUU7NEJBQU87NEJBQzNCO3lCQUNBO29CQUNGLEtBQUs7d0JBQ0osT0FBTzs0QkFBQztnQ0FBRUcsTUFBTUo7NEJBQUs7NEJBQUc7eUJBQWdEO29CQUN6RSx1REFBdUQ7b0JBQ3ZELEtBQUs7b0JBQ0wsS0FBSztvQkFDTCxLQUFLO3dCQUNKLE9BQU87NEJBQUM7Z0NBQUVLLFFBQVFMOzRCQUFLOzRCQUFHLENBQUMsMEJBQTBCLEVBQUVELEtBQUsscUJBQXFCLENBQUM7eUJBQUM7b0JBQ3BGO3dCQUNDLE1BQU0sSUFBSUcsTUFBTTtnQkFDbEI7WUFDRDtnQkFDQyxNQUFNLElBQUlBLE1BQU07UUFDbEI7SUFDRDtBQUNEO0FBRUE7Ozs7OztDQU1DLEdBQ0RULFVBQVVhLFNBQVMsQ0FBQ2QsSUFBSSxHQUFHRjtBQUUzQmlCLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltYWlkLy4vbm9kZV9tb2R1bGVzL2FuaWxpc3Qtbm9kZS9saWIvdXRpbGl0aWVzLmpzP2IwNmIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmV0Y2hlciA9IHJlcXVpcmUoXCIuL2ZldGNoZXJcIikuc2VuZDtcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gQSBwcml2YXRlIGNsYXNzIHRvIHRha2UgY2FyZSBvZiBjb21tb24gbWV0aG9kcyBpbiB0aGUgcGFja2FnZVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAc2luY2UgMS41LjBcclxuICovXHJcbmNsYXNzIFV0aWxpdGllcyB7XHJcblx0LyoqXHJcblx0ICogQGNvbnN0cnVjdG9yXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IFthY2Nlc3NLZXldIC0gVGhlIEFuaUxpc3QgQVBJIHRva2VuLlxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBvcHRpb25zIHVzZWQgd2hpbGUgZ2V0dGluZyBpbmZvIGZyb20gQW5pTGlzdFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGFjY2Vzc0tleSwgb3B0aW9ucykge1xyXG5cdFx0dGhpcy5rZXkgPSBhY2Nlc3NLZXk7XHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2VuZXJhdGUgdGhlIGFwcHJvcHJpYXRlIHF1ZXJ5IGhlYWRlciBmb3IgdGhlIHF1ZXJ5LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gdHlwZSAtIFRoZSBxdWVyeSB0eXBlIG9mIHRoZSBoZWFkZXIuIChpZTogVXNlciBvciBDaGFyYWN0ZXIpXHJcblx0ICogQHBhcmFtIHsgTnVtYmVyfFN0cmluZyB9IGlkIC0gVGhlIHNlYXJjaCB0ZXJtIGZvciB0aGUgcXVlcnkuXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gYWRkSXRtIC0gQW4gYWRkaXRpb25hbCBpdGVtIHRvIGFkZCB0byB0aGUgc2VhcmNoIHZhcmlhYmxlcy5cclxuXHQgKiBAcmV0dXJucyB7IE9iamVjdFtdIH0gUmV0dXJucyBhbiBhcnJheS4gSW5kZXggMCBpcyB0aGUgc2VhcmNoIHZhcmlhYmxlcyBhbmQgSW5kZXggMVxyXG5cdCAqICAgICAgaXMgdGhlIHF1ZXJ5IGhlYWRlciBzdHJpbmcuXHJcblx0ICogQHNpbmNlIDEuNS4wXHJcblx0ICovXHJcblx0Z2VuZXJhdGVRdWVyeUhlYWRlcnModHlwZSwgaXRlbSwgYWRkSXRtKSB7XHJcblx0XHQvLyBBIHNlYXJjaCB0ZXJtIGlzIG5lZWRlZC4gVGhyb3cgYW4gZXJyb3IuXHJcblx0XHRpZiAoIWl0ZW0pIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiQSB0ZXJtIGlzIG5vdCBwcm92aWRlZCFcIik7XHJcblx0XHR9XHJcblx0XHRpZiAoYWRkSXRtICYmIHR5cGVvZiBhZGRJdG0gIT09IFwic3RyaW5nXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVGhlIGFkZGl0aW9uYWwgaXRlbSBpbiB0aGUgcXVlcnkgbXVzdCBiZSBhIHN0cmluZyFcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0c3dpdGNoICh0eXBlb2YgaXRlbSkge1xyXG5cdFx0XHRjYXNlIFwibnVtYmVyXCI6XHJcblx0XHRcdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdFx0XHRjYXNlIFwiTWVkaWFMaXN0Q29sbGVjdGlvblwiOlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdFx0XHRcdHsgaWQ6IGl0ZW0sIHR5cGU6IGFkZEl0bSB9LFxyXG5cdFx0XHRcdFx0XHRcdFwicXVlcnkgKCRpZDogSW50LCAkdHlwZTogTWVkaWFUeXBlKSB7IE1lZGlhTGlzdENvbGxlY3Rpb24odXNlcklkOiAkaWQsIHR5cGU6ICR0eXBlKSB7XCJcclxuXHRcdFx0XHRcdFx0XTtcclxuXHRcdFx0XHRcdGNhc2UgXCJVc2VyXCI6XHJcblx0XHRcdFx0XHRjYXNlIFwiU3RhZmZcIjpcclxuXHRcdFx0XHRcdGNhc2UgXCJDaGFyYWN0ZXJcIjpcclxuXHRcdFx0XHRcdGNhc2UgXCJTdHVkaW9cIjpcclxuXHRcdFx0XHRcdGNhc2UgXCJBY3Rpdml0eVwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIlRocmVhZFwiOlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gW3sgaWQ6IGl0ZW0gfSwgYHF1ZXJ5ICgkaWQ6IEludCkgeyAke3R5cGV9IChpZDogJGlkKSB7IGBdO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVGhpcyB0eXBlIGRvZXNuJ3QgaGF2ZSBhIHF1ZXJ5IGFzc2lnbmVkIHRvIGl0IVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcclxuXHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcclxuXHRcdFx0XHRcdGNhc2UgXCJNZWRpYUxpc3RDb2xsZWN0aW9uXCI6XHJcblx0XHRcdFx0XHRcdHJldHVybiBbXHJcblx0XHRcdFx0XHRcdFx0eyBuYW1lOiBpdGVtLCB0eXBlOiBhZGRJdG0gfSxcclxuXHRcdFx0XHRcdFx0XHRcInF1ZXJ5ICgkbmFtZTogU3RyaW5nLCAkdHlwZTogTWVkaWFUeXBlKSB7IE1lZGlhTGlzdENvbGxlY3Rpb24odXNlck5hbWU6ICRuYW1lLCB0eXBlOiAkdHlwZSkge1wiXHJcblx0XHRcdFx0XHRcdF07XHJcblx0XHRcdFx0XHRjYXNlIFwiVXNlclwiOlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gW3sgbmFtZTogaXRlbSB9LCBcInF1ZXJ5ICgkbmFtZTogU3RyaW5nKSB7IFVzZXIgKG5hbWU6ICRuYW1lKSB7IFwiXTtcclxuXHRcdFx0XHRcdC8vIEJvdGggc3RhZmYgYW5kIGNoYXJhY3RlciBuZWVkIHRoZSBzYW1lIHF1ZXJ5IGhlYWRlci5cclxuXHRcdFx0XHRcdGNhc2UgXCJTdGFmZlwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIkNoYXJhY3RlclwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIlN0dWRpb1wiOlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gW3sgc2VhcmNoOiBpdGVtIH0sIGBxdWVyeSAoJHNlYXJjaDogU3RyaW5nKSB7ICR7dHlwZX0gKHNlYXJjaDogJHNlYXJjaCkgeyBgXTtcclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlRoaXMgdHlwZSBkb2Vzbid0IGhhdmUgYSBxdWVyeSBhc3NpZ25lZCB0byBpdCFcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlRlcm0gZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVpcmVkIHR5cGVzIVwiKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZW5kIGEgY2FsbCB0byB0aGUgQW5pTGlzdCBBUEkgd2l0aCBhIHF1ZXJ5IGFuZCB2YXJpYWJsZXMuXHJcbiAqIEBwYXJhbSB7IFN0cmluZyB9IHF1ZXJ5IC0gVGhlIHF1ZXJ5IHRvIHNlbmQgdG8gdGhlIEFuaUxpc3QgQVBJXHJcbiAqIEBwYXJhbSB7IE9iamVjdCB9IHZhcmlhYmxlcyAtIEFueSB2YXJpYWJsZXMgcmVxdWlyZWQgc3VjaCBhcyBhIHVzZXJuYW1lIG9yIElEXHJcbiAqIEByZXR1cm5zIHsgT2JqZWN0IH0gUmV0dXJucyBhIGN1c3RvbWl6ZWQgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBkYXRhIGZldGNoZWQuXHJcbiAqIEBzaW5jZSAxLjAuMFxyXG4gKi9cclxuVXRpbGl0aWVzLnByb3RvdHlwZS5zZW5kID0gZmV0Y2hlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVXRpbGl0aWVzO1xyXG4iXSwibmFtZXMiOlsiZmV0Y2hlciIsInJlcXVpcmUiLCJzZW5kIiwiVXRpbGl0aWVzIiwiY29uc3RydWN0b3IiLCJhY2Nlc3NLZXkiLCJvcHRpb25zIiwia2V5IiwiZ2VuZXJhdGVRdWVyeUhlYWRlcnMiLCJ0eXBlIiwiaXRlbSIsImFkZEl0bSIsIkVycm9yIiwiaWQiLCJuYW1lIiwic2VhcmNoIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/utilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/utils/filters.js":
/*!********************************************************!*\
  !*** ./node_modules/anilist-node/lib/utils/filters.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mediaFilterType = __webpack_require__(/*! ../types/mediaFilterTypes */ \"(rsc)/./node_modules/anilist-node/lib/types/mediaFilterTypes.js\");\nconst activityFilterType = __webpack_require__(/*! ../types/activityFilterTypes */ \"(rsc)/./node_modules/anilist-node/lib/types/activityFilterTypes.js\");\n/**\r\n * Validates the filter object for searching.\r\n * @private\r\n * @param {String} type The type of query that the filter would be applied to.\r\n * @param {Object} filterObj A key/value paired filter object.\r\n * @returns Will throw an error if the filter object is bad (ie: Non-existent key or incorrect value type).\r\n * Returns nothing upon success.\r\n */ const validateFilters = function(type, filterObj) {\n    const filterKeys = Object.keys(filterObj);\n    let filterTest;\n    if (type === \"activity\") {\n        filterTest = activityFilterType;\n    }\n    if (type === \"anime\" || type === \"manga\") {\n        filterTest = mediaFilterType;\n    }\n    if (!filterTest) {\n        throw new Error(`Filter type not recognized by internal function. Bad type: ${type}.`);\n    }\n    for(let x = 0; x < filterKeys.length; x++){\n        let myKey = filterKeys[x];\n        let myValue = filterObj[myKey];\n        let filterType = filterTest[myKey];\n        if (!filterType) {\n            throw new Error(`Filter key not recognized. Bad key: ${myKey}.`);\n        }\n        if (myValue instanceof Array) {\n            let typeDef = typeof filterType[0];\n            myValue.forEach((value)=>{\n                if (typeof value !== typeDef) {\n                    throw new Error(`Value (${value}) type does not match filter type in array key (${myKey})!`);\n                }\n            });\n            continue;\n        }\n        if (typeof myValue !== filterType) {\n            throw new Error(`Value (${myValue}) type does not match filter type in key (${myKey})!`);\n        }\n    }\n};\n/**\r\n * Generate a query header with filter options.\r\n * @private\r\n * @param {String} searchType The search type to build the query with\r\n * @param {Object} filterObj A simple key-value pair object for setting filters.\r\n * @returns {String} Returns the query header if the filter is valid. Else, it will throw an error.\r\n */ const filterBuilder = function(searchType, filterObj = null) {\n    if (typeof filterObj !== \"object\") {\n        throw new Error(`Filter object used is of a non-object type! Expected an object but got ${filterObj} instead.`);\n    }\n    if (filterObj) {\n        validateFilters(searchType, filterObj);\n    }\n    let baseQuery = `query ($page: Int, $perPage: Int, $search: String) {\r\n        Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } `;\n    if (searchType === \"activity\") {\n        baseQuery = `query ($page: Int, $perPage: Int, $id: Int) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            activities (id: $id`;\n    } else if (searchType === \"anime\") {\n        baseQuery += \"media (type: ANIME, search: $search\";\n    } else if (searchType === \"manga\") {\n        baseQuery += \"media (type: MANGA, search: $search\";\n    }\n    if (filterObj) {\n        let filterKeys = Object.keys(filterObj);\n        for(let x = 0; x < filterKeys.length; x++){\n            let filterValue = filterObj[filterKeys[x]];\n            // If a value is completely uppercase, we are going to assume it's an ENUM\n            if (filterValue instanceof Array) {\n                filterValue = `[${filterValue.map((value)=>typeof value === \"string\" && value !== value.toUpperCase() ? `\"${value}\"` : value).join(\", \")}]`;\n            } else if (typeof filterValue === \"string\" && filterValue !== filterValue.toUpperCase()) {\n                filterValue = `\"${filterValue}\"`;\n            }\n            baseQuery += `, ${filterKeys[x]}: ${filterValue}`;\n        }\n    }\n    return `${baseQuery}) {`;\n};\nmodule.exports = filterBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/utils/filters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/anilist-node/lib/utils/headerBuilder.js":
/*!**************************************************************!*\
  !*** ./node_modules/anilist-node/lib/utils/headerBuilder.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\r\n * Build a query header for query/mutation queries with object\r\n * values.\r\n * @param {String} queryType - The type of query (ie: query or mutation)\r\n * @param {String} queryTarget - What query object is it? (SaveMediaListEntry or Media)\r\n * @param {Object} object - Object of input values to use in the header.\r\n */ \nconst headerBuilder = function(queryType, queryTarget, object) {\n    let query = `${queryType} { ${queryTarget} (`;\n    const keys = Object.keys(object);\n    const values = Object.values(object);\n    keys.forEach((key, value)=>{\n        if (key === \"startedAt\" || key === \"completedAt\") {\n            if (typeof values[value] !== \"object\") {\n                throw new Error(\"Date keys are not objects!\");\n            }\n            query += key + \": \" + JSON.stringify(values[value]).replace(/\"/g, \"\");\n            if (value + 1 !== keys.length) {\n                query += \", \";\n            }\n            return;\n        }\n        if (typeof values[value] === \"object\") {\n            throw new Error(\"Provided object has a nested value!\");\n        }\n        query += key + \": \" + values[value];\n        if (value + 1 !== keys.length) {\n            query += \", \";\n        }\n    });\n    return query + \") {\";\n};\nmodule.exports = headerBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW5pbGlzdC1ub2RlL2xpYi91dGlscy9oZWFkZXJCdWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQztBQUNELE1BQU1BLGdCQUFnQixTQUFVQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsTUFBTTtJQUM3RCxJQUFJQyxRQUFRLENBQUMsRUFBRUgsVUFBVSxHQUFHLEVBQUVDLFlBQVksRUFBRSxDQUFDO0lBRTdDLE1BQU1HLE9BQU9DLE9BQU9ELElBQUksQ0FBQ0Y7SUFDekIsTUFBTUksU0FBU0QsT0FBT0MsTUFBTSxDQUFDSjtJQUU3QkUsS0FBS0csT0FBTyxDQUFDLENBQUNDLEtBQUtDO1FBQ2xCLElBQUlELFFBQVEsZUFBZUEsUUFBUSxlQUFlO1lBQ2pELElBQUksT0FBT0YsTUFBTSxDQUFDRyxNQUFNLEtBQUssVUFBVTtnQkFDdEMsTUFBTSxJQUFJQyxNQUFNO1lBQ2pCO1lBRUFQLFNBQVNLLE1BQU0sT0FBT0csS0FBS0MsU0FBUyxDQUFDTixNQUFNLENBQUNHLE1BQU0sRUFBRUksT0FBTyxDQUFDLE1BQU07WUFDbEUsSUFBSUosUUFBUSxNQUFNTCxLQUFLVSxNQUFNLEVBQUU7Z0JBQzlCWCxTQUFTO1lBQ1Y7WUFDQTtRQUNEO1FBRUEsSUFBSSxPQUFPRyxNQUFNLENBQUNHLE1BQU0sS0FBSyxVQUFVO1lBQ3RDLE1BQU0sSUFBSUMsTUFBTTtRQUNqQjtRQUVBUCxTQUFTSyxNQUFNLE9BQU9GLE1BQU0sQ0FBQ0csTUFBTTtRQUNuQyxJQUFJQSxRQUFRLE1BQU1MLEtBQUtVLE1BQU0sRUFBRTtZQUM5QlgsU0FBUztRQUNWO0lBQ0Q7SUFFQSxPQUFPQSxRQUFRO0FBQ2hCO0FBRUFZLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWFpZC8uL25vZGVfbW9kdWxlcy9hbmlsaXN0LW5vZGUvbGliL3V0aWxzL2hlYWRlckJ1aWxkZXIuanM/YzBmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQnVpbGQgYSBxdWVyeSBoZWFkZXIgZm9yIHF1ZXJ5L211dGF0aW9uIHF1ZXJpZXMgd2l0aCBvYmplY3RcclxuICogdmFsdWVzLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXVlcnlUeXBlIC0gVGhlIHR5cGUgb2YgcXVlcnkgKGllOiBxdWVyeSBvciBtdXRhdGlvbilcclxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5VGFyZ2V0IC0gV2hhdCBxdWVyeSBvYmplY3QgaXMgaXQ/IChTYXZlTWVkaWFMaXN0RW50cnkgb3IgTWVkaWEpXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBPYmplY3Qgb2YgaW5wdXQgdmFsdWVzIHRvIHVzZSBpbiB0aGUgaGVhZGVyLlxyXG4gKi9cclxuY29uc3QgaGVhZGVyQnVpbGRlciA9IGZ1bmN0aW9uIChxdWVyeVR5cGUsIHF1ZXJ5VGFyZ2V0LCBvYmplY3QpIHtcclxuXHRsZXQgcXVlcnkgPSBgJHtxdWVyeVR5cGV9IHsgJHtxdWVyeVRhcmdldH0gKGA7XHJcblxyXG5cdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xyXG5cdGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXMob2JqZWN0KTtcclxuXHJcblx0a2V5cy5mb3JFYWNoKChrZXksIHZhbHVlKSA9PiB7XHJcblx0XHRpZiAoa2V5ID09PSBcInN0YXJ0ZWRBdFwiIHx8IGtleSA9PT0gXCJjb21wbGV0ZWRBdFwiKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgdmFsdWVzW3ZhbHVlXSAhPT0gXCJvYmplY3RcIikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkRhdGUga2V5cyBhcmUgbm90IG9iamVjdHMhXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRxdWVyeSArPSBrZXkgKyBcIjogXCIgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZXNbdmFsdWVdKS5yZXBsYWNlKC9cIi9nLCBcIlwiKTtcclxuXHRcdFx0aWYgKHZhbHVlICsgMSAhPT0ga2V5cy5sZW5ndGgpIHtcclxuXHRcdFx0XHRxdWVyeSArPSBcIiwgXCI7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0eXBlb2YgdmFsdWVzW3ZhbHVlXSA9PT0gXCJvYmplY3RcIikge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlZCBvYmplY3QgaGFzIGEgbmVzdGVkIHZhbHVlIVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRxdWVyeSArPSBrZXkgKyBcIjogXCIgKyB2YWx1ZXNbdmFsdWVdO1xyXG5cdFx0aWYgKHZhbHVlICsgMSAhPT0ga2V5cy5sZW5ndGgpIHtcclxuXHRcdFx0cXVlcnkgKz0gXCIsIFwiO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gcXVlcnkgKyBcIikge1wiO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBoZWFkZXJCdWlsZGVyO1xyXG4iXSwibmFtZXMiOlsiaGVhZGVyQnVpbGRlciIsInF1ZXJ5VHlwZSIsInF1ZXJ5VGFyZ2V0Iiwib2JqZWN0IiwicXVlcnkiLCJrZXlzIiwiT2JqZWN0IiwidmFsdWVzIiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwicmVwbGFjZSIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/anilist-node/lib/utils/headerBuilder.js\n");

/***/ })

};
;